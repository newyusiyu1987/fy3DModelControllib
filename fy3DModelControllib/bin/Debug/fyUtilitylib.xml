<?xml version="1.0"?>
<doc>
    <assembly>
        <name>fyUtilitylib</name>
    </assembly>
    <members>
        <member name="T:fyUtilitylib.DataBase.fyAccessDBHelper">
            <summary>
            Access数据库操作类
            </summary>
        </member>
        <member name="P:fyUtilitylib.DataBase.fyAccessDBHelper.ConnectionString">
            <summary>
            设置数据库连接字符串
            </summary>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.#ctor(System.String)">
            <summary>
            构造Access数据库操作类
            
            無數据庫密碼時(有沒有用戶密碼該方法都可以),這种方式以共享方式打開.
            ConnectionSring="Provider=Microsoft.Jet.OLEDB.4.0;Data source=D:\\Testdb.mdb;"
            有數据庫密碼時(有沒有用戶密碼該方法都可以),這种方式以獨占式方式打開.
            ConnectionSring="Provider=Microsoft.Jet.OLEDB.4.0;Data Source=D:\\Testdb.mdb;Jet OLEDB:Engine Type=5"
            在數据庫密碼和用戶密碼都有時,可以用該方法,但用戶密碼處就算設有密碼也必須為空,這种方式也將以獨占式方式打開.
            ConnectionSring="Provider=Microsoft.Jet.OleDB.4.0;Data Source=D:\\Testdb.mdb;Jet OleDb:DataBase Password=12345;Persist Security Info=true;password=;user id=Admin"
            </summary>
            <param name="ConnectionString"></param>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.CreateDB(System.String,System.String)">
            <summary>
            根据文件路径和密码新建一个Access数据库
            </summary>
            <param name="FilePath"></param>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteDataTable(System.String)">
            <summary>
            执行一个查询，并返回结果集
            </summary>
            <param name="sql">要执行的查询SQL文本命令</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteDataTable(System.String,System.Data.CommandType)">
            <summary>
            执行一个查询,并返回查询结果
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个查询,并返回查询结果
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <param name="parameters">Transact-SQL 语句或存储过程的参数数组</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteReader(System.String)">
            <summary>
            
            </summary>
            <param name="sql">要执行的查询SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteReader(System.String,System.Data.CommandType)">
            <summary>
            
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <param name="parameters">Transact-SQL 语句或存储过程的参数数组</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteScalar(System.String)">
            <summary>
            
            </summary>
            <param name="sql">要执行的查询SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteScalar(System.String,System.Data.CommandType)">
            <summary>
            
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <param name="parameters">Transact-SQL 语句或存储过程的参数数组</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteNonQuery(System.String)">
            <summary>
            对数据库执行增删改操作
            </summary>
            <param name="sql">要执行的查询SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType)">
            <summary>
            对数据库执行增删改操作
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.OleDb.OleDbParameter[])">
            <summary>
            对数据库执行增删改操作
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <param name="parameters">Transact-SQL 语句或存储过程的参数数组</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyAccessDBHelper.GetTables">
            <summary>
            返回当前连接的数据库中所有由用户创建的数据库
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.DataBase.fyMSSQLDBHelper">
            <summary>
            http://www.oschina.net/code/snippet_12_1317
            针对SQL Server数据库操作的通用类
            作者：周公
            日期：2009-01-08
            Version:1.0
            </summary>
        </member>
        <member name="P:fyUtilitylib.DataBase.fyMSSQLDBHelper.ConnectionString">
            <summary>
            设置数据库连接字符串
            </summary>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.#ctor">
            <summary>
            构造函数
            小贴士 连接字符串格式
            connectionString="server=112.126.64.66;database=taox; user=sa;password=caigen";
            </summary>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.#ctor(System.String)">
            <summary>
            构造函数
            小贴士 连接字符串格式
            connectionString="server=112.126.64.66;database=taox; user=sa;password=caigen";
            </summary>
            <param name="connectionString">数据库连接字符串</param>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteDataTable(System.String)">
            <summary>
            执行一个查询，并返回结果集
            </summary>
            <param name="sql">要执行的查询SQL文本命令</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteDataTable(System.String,System.Data.CommandType)">
            <summary>
            执行一个查询,并返回查询结果
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <returns>返回查询结果集</returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一个查询,并返回查询结果
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <param name="parameters">Transact-SQL 语句或存储过程的参数数组</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteReader(System.String)">
            <summary>
            
            </summary>
            <param name="sql">要执行的查询SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteReader(System.String,System.Data.CommandType)">
            <summary>
            
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteReader(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <param name="parameters">Transact-SQL 语句或存储过程的参数数组</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteScalar(System.String)">
            <summary>
            
            </summary>
            <param name="sql">要执行的查询SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteScalar(System.String,System.Data.CommandType)">
            <summary>
            
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <param name="parameters">Transact-SQL 语句或存储过程的参数数组</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteNonQuery(System.String)">
            <summary>
            对数据库执行增删改操作
            </summary>
            <param name="sql">要执行的查询SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType)">
            <summary>
            对数据库执行增删改操作
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            对数据库执行增删改操作
            </summary>
            <param name="sql">要执行的SQL语句</param>
            <param name="commandType">要执行的查询语句的类型，如存储过程或者SQL文本命令</param>
            <param name="parameters">Transact-SQL 语句或存储过程的参数数组</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.GetTables">
            <summary>
            返回当前连接的数据库中所有由用户创建的数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fyMSSQLDBHelper.GetDateTimeFromMSSQL(System.String)">
            <summary>
            从MSSQL数据库中获取当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fySQLiteDBHelper.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbPath">SQLite 数据库文件路径</param>
        </member>
        <member name="M:fyUtilitylib.DataBase.fySQLiteDBHelper.CreateDB(System.String,System.String)">
            <summary>
            创建 SQLite 数据库文件
            </summary>
            <param name="dbPath">要创建的 SQLite 数据库文件路径</param>
        </member>
        <member name="M:fyUtilitylib.DataBase.fySQLiteDBHelper.ExecuteNonQuery(System.String,System.Collections.Generic.IList{System.Data.SQLite.SQLiteParameter})">
            <summary>
            对 SQLite 数据库执行增删改操作，返回受影响的行数。
            </summary>
            <param name="sql">要执行的查询语句</param>
            <param name="parameters">执行 SQL 查询语句所需要的参数，参数必须以它们在 SQL 语句中的顺序为准</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fySQLiteDBHelper.ExecuteReader(System.String,System.Collections.Generic.IList{System.Data.SQLite.SQLiteParameter})">
            <summary>
            执行一个查询语句，返回一个关联的 SQLiteDataReader 实例
            </summary>
            <param name="sql">要执行的查询语句</param>
            <param name="parameters">执行 SQL 查询语句所需要的参数，参数必须以它们在 SQL 语句中的顺序为准</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fySQLiteDBHelper.ExecuteDataTable(System.String,System.Collections.Generic.IList{System.Data.SQLite.SQLiteParameter})">
            <summary>
            执行一个查询语句，返回一个包含查询结果的 DataTable
            </summary>
            <param name="sql">要执行的查询语句</param>
            <param name="parameters">执行 SQL 查询语句所需要的参数，参数必须以它们在 SQL 语句中的顺序为准</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fySQLiteDBHelper.ExecuteScalar(System.String,System.Collections.Generic.IList{System.Data.SQLite.SQLiteParameter})">
            <summary>
            执行一个查询语句，返回查询结果的第一行第一列
            </summary>
            <param name="sql">要执行的查询语句</param>
            <param name="parameters">执行 SQL 查询语句所需要的参数，参数必须以它们在 SQL 语句中的顺序为准</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fySQLiteDBHelper.GetSchema">
            <summary>
            查询数据库中的所有数据类型信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.DataBase.fySQLiteDBHelper.ChangePassword(System.String)">
            <summary>
            修改SQLite数据库的连接密码
            </summary>
            <param name="NewPassword"></param>
        </member>
        <member name="T:fyUtilitylib.fyApiHelper">
            <summary>
            API操作接口类
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.ExcuteOutPro">
            <summary>
            执行外部程序,
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.IsRecyleBinEmpty">
            <summary>
            判断回收站是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.KillProcess(System.String)">
            <summary>
            根据进程名称关闭进程
            </summary>
            <param name="processName"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.GetPidByTitle(System.String)">
            <summary>
            根据窗口标题获取PID
            </summary>
            <param name="windowTitle">窗口标题</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.GetPidByProcessName(System.String)">
            <summary>
            获取进程的ID
            </summary>
            <param name="processName">进程名称</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.FindWindow(System.String)">
            <summary>
            根据窗口标题查找窗口句柄
            </summary>
            <param name="title">窗口标题</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.WindowHide(System.String)">
            <summary>
            隐藏控制台程序的窗口
            </summary>
            <param name="consoleTitle"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.ReadMemoryValue(System.Int32,System.String)">
            <summary>
            读取内存中的值
            </summary>
            <param name="baseAddress">地址</param>
            <param name="processName">进程名</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.WriteMemoryValue(System.Int32,System.String,System.Int32)">
            <summary>
            将值写入指定内存地址中
            </summary>
            <param name="baseAddress">地址</param>
            <param name="processName">进程名</param>
            <param name="value"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.CloseMonitor(System.IntPtr)">
            <summary>
            关闭显示器
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.OpenMonitor(System.IntPtr)">
            <summary>
            打开显示器
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.SetWindowPosition(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            设置窗口位置
            </summary>
            <param name="hwnd"></param>
            <param name="hWndInsertAfter"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="cx"></param>
            <param name="cy"></param>
            <param name="uFlags"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.PressKeys(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            用硬件模拟的方式发送按键
            </summary>
            <param name="bvk">键的ACCII码</param>
            <param name="bScan">通常为0</param>
            <param name="dwFlags">按下为0，弹起为：0x2</param>
            <param name="dwExtraInfo">通常为0</param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.FindWindowByText(System.String)">
            <summary>
            用指定的文字查找窗口句柄
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.GetWindowRectangle(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            根据窗口句柄获取窗口相对屏幕左上角的位置
            </summary>
            <param name="hwnd">窗口句柄</param>
            <param name="rect">用于保存坐标</param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.WriteMemoryValue(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            写入内存,写入整型数
            </summary>
            <param name="baseAddress">要写入数据的进程内存地址</param>
            <param name="processName">进程名称</param>
            <param name="value">要写入的值</param>
            <param name="nsize">写入的长度</param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.ClickAPoint(System.Int32,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            用硬件的方式模拟鼠标点击
            </summary>
            <param name="dData"></param>
            <param name="ClickPoint">要点击的点</param>
            <param name="OldPoint">点击后要还原的点</param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.ReadIntValue(System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            以整数读取内存数据
            </summary>
            <param name="baseAddress">内在地址</param>
            <param name="processName">进程名称</param>
            <param name="nsize">读取大小</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.ReadFloatValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            以浮点数读取内存
            </summary>
            <param name="baseAddress">要读取数据的进程内存地址</param>
            <param name="processName">进程名称</param>
            <param name="nsize">读取的长度</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.ReadTextValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            以文字方式读取内存
            </summary>
            <param name="baseAddress">要读取数据的进程内存地址</param>
            <param name="processName">进程名称</param>
            <param name="nsize">读取的长度</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.ReadACSIIValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            读取内存ACSII码值
            </summary>
            <param name="baseAddress"></param>
            <param name="pid"></param>
            <param name="nsize"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.WriteMemoryValue(System.Int32,System.Int32,System.Single,System.Int32)">
            <summary>
            写入内存
            </summary>
            <param name="baseAddress">要写入数据的进程内存地址</param>
            <param name="processName">进程名称</param>
            <param name="value">要写入的值</param>
            <param name="nsize">写入的长度</param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.SendMsg(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            发送消息
            </summary>
            <param name="WindowText">窗体名称</param>
            <param name="data">消息类型</param>
            <param name="lparame">附加信息</param>
            <param name="lparam">附加信息</param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.SetWindowToTop(System.IntPtr)">
            <summary>
            使用指定句柄激活窗体
            </summary>
            <param name="hwnd"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.SetWindowToTop(System.String)">
            <summary>
            使用窗体名称激活窗体
            </summary>
            <param name="WindowText"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.PressKeysWithSendMsg(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <param name="keys"></param>
            <param name="DataType"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.SetFormText(System.IntPtr,System.String)">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <param name="text"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.FindWindow(System.IntPtr,System.String)">
            <summary>
            查找窗体
            </summary>
            <param name="Hwnd">窗口类名</param>
            <param name="text">窗口名，就是窗口标题</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.FindWindow(System.String,System.String)">
            <summary>
            FindWindow返回与指定字符创相匹配的窗口类名或窗口名的最顶层窗口的窗口句柄
            </summary>
            <param name="lpClassName">lpClassName就是窗口类名</param>
            <param name="lpWindowName">lpWindowName是窗口名，就是窗口标题，
            任何一个窗口都有标题，当然也会有相同标题的，那只会找到在z-order最上层的窗口。</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.Int32)">
            <summary>
            SendMessage将指定的消息发送到一个或多个窗口
            </summary>
            <param name="hwnd">hWnd是接收消息的窗口的句柄</param>
            <param name="wMsg">Msg是将被发送的消息</param>
            <param name="wParam">wParam和IParam都是指定附加的消息信息</param>
            <param name="lParam">wParam和IParam都是指定附加的消息信息</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            引入API函数
            </summary>
            <param name="hwnd"> 窗口句柄</param>
            <param name="rect">需要填充的矩形</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            移动鼠标
            </summary>
            <param name="x">相对屏幕坐标X</param>
            <param name="y">相对屏幕坐标Y</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.mouse_event(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            模拟鼠标点击
            </summary>
            <param name="dwFlags">任意鼠标行为组合</param>
            <param name="dx">鼠标X位置</param>
            <param name="dy">鼠标Y位置</param>
            <param name="dwData">如果dwFlags为MOOSEEVENTF_WHEEL，即滑轮，
            此处为dwData指定鼠标轮移动的数量，正值表明鼠标轮向前转动，
            即远离用户的方向；负值表明鼠标轮向后转动，即朝向用户。
            一个轮击定义为WHEEL_DELTA，即120</param>
            <param name="dwExtraInfo"></param>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.ShowCursor(System.Boolean)">
            <summary>
            显示或隐藏光标
            </summary>
            <param name="Cshow"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.OpenProcess(System.Int32,System.Boolean,System.Int32)">
            <summary>
            打开进程
            </summary>
            <param name="accessflag">访问权限 0x1F0FFF 最高权限</param>
            <param name="bInheritHandle"></param>
            <param name="dwProcessId">进程ID</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.ReadProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hProcess"></param>
            <param name="lpBaseAddress"></param>
            <param name="lpBuffer"></param>
            <param name="nSize"></param>
            <param name="lpNumberOfBytesRead"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.WriteProcessMemory(System.IntPtr,System.IntPtr,System.Single[],System.Int32,System.IntPtr)">
            <summary>
            往内存地址写入值
            </summary>
            <param name="hProcess"> 进程句柄</param>
            <param name="lpBaseAddress">内存地址</param>
            <param name="lpBuffer">数据缓冲区</param>
            <param name="nSize"></param>
            <param name="lpNumberOfBytesWritten"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyApiHelper.CloseHandle(System.IntPtr)">
            <summary>
             释放句柄
            </summary>
            <param name="hObject"></param>
        </member>
        <!-- 对于成员“M:fyUtilitylib.fyApiHelper.GetCurrentPositionEx(System.IntPtr,System.Drawing.Point@)”忽略有格式错误的 XML 注释 -->
        <member name="T:fyUtilitylib.fyApiHelper.MouseEventFlags">
            <summary>
            鼠标行为的枚举
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyApiHelper.SendMsgFlage">
            <summary>
            发送消息标志位
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyAppConfigHelper">
            <summary>
            配置文件操作类
            来源：网络
            原名：MyAppConfigHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyAppConfigHelper.#ctor(System.String)">
            <summary>
            用户指定具体的配置文件路径
            </summary>
            <param name="configFilePath">配置文件路径（绝对路径）</param>
        </member>
        <member name="M:fyUtilitylib.fyAppConfigHelper.AppConfigSet(System.String,System.String)">
            <summary>
            设置程序的config文件
            </summary>
            <param name="keyName">键名</param>
            <param name="keyValue">键值</param>
        </member>
        <member name="M:fyUtilitylib.fyAppConfigHelper.AppConfigGet(System.String)">
            <summary>
            读取程序的config文件的键值。
            如果键名不存在，返回空
            </summary>
            <param name="keyName">键名</param>
            <returns>键值</returns>
        </member>
        <member name="M:fyUtilitylib.fyAppConfigHelper.GetSubValue(System.String,System.String)">
            <summary>
            获取指定键名中的子项的值
            </summary>
            <param name="keyName">键名</param>
            <param name="subKeyName">以分号(;)为分隔符的子项名称</param>
            <returns>对应子项名称的值（即是=号后面的值）</returns>
        </member>
        <member name="T:fyUtilitylib.fyBase64Helper">
            <summary>
            Base64 编码帮助类
            来源：网络
            原名：MyBase64Helper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyBase64Helper.CodeTable">
            <summary>
            设置并验证密码表合法性
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyBase64Helper.Pad">
            <summary>
            设置并验证补码合法性
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyBase64Helper.#ctor">
            <summary>
            初始化字典
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyBase64Helper.GetStandardBase64">
            <summary>
            获取具有标准的Base64密码表的加密类
            </summary>
            <returns>Base64密码表的加密类</returns>
        </member>
        <member name="M:fyUtilitylib.fyBase64Helper.Encrypt(System.String)">
            <summary>
            使用默认的密码表（双向哈西字典）加密字符串
            </summary>
            <param name="input">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyBase64Helper.Decrypt(System.String)">
            <summary>
            使用默认的密码表（双向哈西字典）解密字符串
            </summary>
            <param name="input">需要解密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="T:fyUtilitylib.fyConvertHelper">
            <summary>
            类型转换帮助类
            来源：网络
            原名：MyConvertHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="value">要转换的值,即原值</param>
            <param name="from">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="to">要转换到的目标进制，只能是2,8,10,16四个值。</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.IsBaseNumber(System.Int32)">
            <summary>
            判断是否是  2 8 10 16
            </summary>
            <param name="baseNumber"></param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.StringToBytes(System.String)">
            <summary>
            将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            使用指定字符集将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
            <param name="encoding">字符编码</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.BytesToString(System.Byte[])">
            <summary>
            将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            使用指定字符集将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <param name="encoding">字符编码</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.BytesToInt32(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="data">需要转换成整数的byte数组</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToInt32``1(``0,System.Int32)">
            <summary>
            将数据转换为整型   转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToInt32(System.String,System.Int32)">
            <summary>
            将数据转换为整型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToInt32(System.Object,System.Int32)">
            <summary>
            将数据转换为整型  转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToBoolean``1(``0,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToBoolean(System.String,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToBoolean(System.Object,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToFloat``1(``0,System.Single)">
            <summary>
            将数据转换为单精度浮点型  转换失败 返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToFloat(System.Object,System.Single)">
            <summary>
            将数据转换为单精度浮点型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToFloat(System.String,System.Single)">
            <summary>
            将数据转换为单精度浮点型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDouble``1(``0,System.Double)">
            <summary>
            将数据转换为双精度浮点型   转换失败返回默认值
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDouble``1(``0,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位   转换失败返回默认值
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDouble(System.Object,System.Double)">
            <summary>
            将数据转换为双精度浮点型  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDouble(System.String,System.Double)">
            <summary>
            将数据转换为双精度浮点型  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDouble(System.Object,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDouble(System.String,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ConvertTo(System.Object,System.Type)">
            <summary>
            将数据转换为指定类型
            </summary>
            <param name="data">转换的数据</param>
            <param name="targetType">转换的目标类型</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ConvertTo``1(System.Object)">
            <summary>
            将数据转换为指定类型
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <param name="data">转换的数据</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDecimal``1(``0,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDecimal(System.String,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDateTime``1(``0,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ToDateTime(System.String,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ConvertToSBC(System.String)">
             <summary>
             转全角的函数(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
             <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
             </remarks>
        </member>
        <member name="M:fyUtilitylib.fyConvertHelper.ConvertToDBC(System.String)">
             <summary> 转半角的函数(DBC case) </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
             <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
             </remarks>
        </member>
        <member name="T:fyUtilitylib.fyDataTableHelper`1">
            <summary>
            DataTable帮助类
            </summary>
            <typeparam name="T">泛类</typeparam>
        </member>
        <member name="P:fyUtilitylib.fyDataTableHelper`1.ExceptionMessage">
            <summary>
            设置或取得异常信息
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper`1.GetInnerDataTable(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            连接两个具有相同数据结构的DataTable,返回DataTable
            </summary>
            <param name="table1">表1</param>
            <param name="table2">表2</param>
            <returns>返回表</returns>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper`1.WriteDataSetToXml(System.Data.DataSet,System.String)">
            <summary>
            将数据集写入xml文件
            </summary>
            <param name="dataset">数据集</param>
            <param name="filename">XML文件名</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper`1.GetSelectDataTable(System.Data.DataTable,System.String)">
            <summary>
            查询DataTable中的数据
            </summary>
            <param name="table">要查询的datatable</param>
            <param name="comText">查询条件</param>
            <returns>数据列集合</returns>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper`1.ToDataTable(System.Collections.Generic.List{`0})">
            <summary>
            实体数组转DataTable
            </summary>
            <typeparam name="T">泛类型</typeparam>
            <param name="entitys">泛类对象</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper`1.DtToList(System.Data.DataTable)">
            <summary>
            DataTable转实体数组
            </summary>
            <param name="dt">数据表</param>
            <returns>泛类列表</returns>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper`1.EnumToDataTable(System.Type,System.String,System.String)">
            <summary>
            枚举转DataTable
            </summary>
            <param name="enumType">类型</param>
            <param name="key">索引</param>
            <param name="val">值</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper`1.CreateTable(System.Collections.Generic.List{System.String})">
            <summary>
            根据nameList里面的字段创建一个表格,返回该表格的DataTable
            </summary>
            <param name="nameList">包含字段信息的列表</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper`1.CreateTable(System.String)">
            <summary>
            通过字符列表创建表字段，字段格式可以是：
            1) a,b,c,d,e
            2) a|int,b|string,c|bool,d|decimal
            </summary>
            <param name="nameString">表名</param>
            <returns>数据表</returns>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper`1.SortedTable(System.Data.DataTable,System.String[])">
            <summary>
            排序表的视图
            </summary>
            <param name="dt">数据表</param>
            <param name="sorts">排序字段</param>
            <returns>排序后的表</returns>
        </member>
        <member name="T:fyUtilitylib.fyDataTableHelper_Perfect">
            <summary>
            DataTable辅助类
            喻思羽 2015.5
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyDataTableHelper_Perfect.CreateTable(System.Data.DataTable,System.Int32[])">
            <summary>
            根据选择的列索引SelectColumnIndex，从DataTable选择列创建新的DataTable
            
            使用范例——
            
            输入DataTable—— Column1   Columns2    Column3
                              value11   value12     value13
                              value21   value22     value23
                              value31   value32     value33
                              
            选择Column1和Column3
            设置SelectColumnIndex为int[]{0,2}
            
            输出DataTable——Column1    Column3
                             value11    value13
                             value21    value23
                             value31    value33
            </summary>
            <param name="dt"></param>
            <param name="SelectColumnIndex"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyDateTimeHelper">
            <summary>
            时间操作类
            来源：网络
            原名：MyDateTimeHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetTheDay(System.Nullable{System.Int32},System.DateTime)">
            <summary>
            哪天
            </summary>
            <param name="days">7天前:-7 7天后:+7</param>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetSunday(System.Nullable{System.Int32},System.DateTime)">
            <summary>
            周日
            </summary>
            <param name="weeks">上周-1 下周+1 本周0</param>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetSaturday(System.Nullable{System.Int32},System.DateTime)">
            <summary>
            周六
            </summary>
            <param name="weeks">上周-1 下周+1 本周0</param>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetFirstDayOfMonth(System.Nullable{System.Int32},System.DateTime)">
            <summary>
            月第一天
            </summary>
            <param name="months">上月-1 本月0 下月1</param>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetLastDayOfMonth(System.Nullable{System.Int32},System.DateTime)">
            <summary>
            月最后一天
            </summary>
            <param name="months">上月0 本月1 下月2</param>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetFirstDayOfYear(System.DateTime)">
            <summary>
            年度第一天
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetLastDayOfYear(System.DateTime)">
            <summary>
            年度最后一天
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetFirstDayOfQuarter(System.Nullable{System.Int32},System.DateTime)">
            <summary>
            季度第一天
            </summary>
            <param name="quarters">上季度-1 下季度+1</param>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetLastDayOfQuarter(System.Nullable{System.Int32},System.DateTime)">
            <summary>
            季度最后一天
            </summary>
            <param name="quarters">上季度0 本季度1 下季度2</param>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetDayOfWeekCN(System.DateTime)">
            <summary>
            中文星期
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetDayOfWeekNum(System.DateTime)">
            <summary>
            获取星期数字形式,周一开始
            </summary>
            <param name="dateTime">日期时间</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetWeekofyear(System.DateTime)">
            <summary> 
            取指定日期是一年中的第几周 
            </summary> 
            <param name="dtime">日期时间</param> 
            <returns>数字 一年中的第几周</returns> 
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetDayofmonth(System.DateTime)">
            <summary> 
            取指定日期是一月中的第几天 
            </summary> 
            <param name="dtime">日期时间</param> 
            <returns>数字 一月中的第几天</returns> 
        </member>
        <member name="M:fyUtilitylib.fyDateTimeHelper.GetDates(System.Int32,System.Int32)">
            <summary>
            Get All Dates in a given month（获取给定年月的所有日期）
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyDESEncryptHelper.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyDESEncryptHelper.Encrypt(System.String,System.String)">
            <summary> 
            加密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:fyUtilitylib.fyDESEncryptHelper.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyDESEncryptHelper.Decrypt(System.String,System.String)">
            <summary> 
            解密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="T:fyUtilitylib.fyDirHelper">
            <summary>
            文件夹有关的操作类
            来源：网络
            原名：MyDirHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetDirs(System.String)">
            <summary>
            获取指定目录中所有子目录列表,若要搜索嵌套的子目录列表,请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.CreateDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="destDirectory">指定目录的绝对路径</param>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.CopyDir(System.String,System.String)">
            <summary>
            复制文件夹
            </summary>
            <param name="strFromDirectory">要复制的文件夹</param>
            <param name="strToDirectory">复制到的文件夹</param>
            <returns>是否复制成功</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.DeleteDir(System.String)">
            <summary>
            删除文件夹
            </summary>
            <param name="dirFullPath">要删除文件夹的全路径</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetDirFiles(System.String)">
            <summary>
            得到当前文件夹中所有文件列表string[]
            </summary>
            <param name="dirFullPath">要遍历的文件夹全路径</param>
            <returns>string[] 文件列表</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetDirFiles(System.String,System.IO.SearchOption)">
            <summary>
            得到当前文件夹及下级文件夹中所有文件列表string[]
            </summary>
            <param name="dirFullPath">要遍历的文件夹全路径</param>
            <param name="so">查找文件的选项，是否包含子级文件夹</param>
            <returns>string[] 文件列表</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetDirFiles(System.String,System.String)">
            <summary>
            得到当前文件夹中指定文件类型［扩展名］文件列表string[]
            </summary>
            <param name="dirFullPath">要遍历的文件夹全路径</param>
            <param name="searchPattern">查找文件的扩展名如“*.*代表所有文件；*.doc代表所有doc文件”</param>
            <returns>string[] 文件列表</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetDirFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            得到当前文件夹及下级文件夹中指定文件类型［扩展名］文件列表string[]
            </summary>
            <param name="dirFullPath">要遍历的文件夹全路径</param>
            <param name="searchPattern">查找文件的扩展名如“*.*代表所有文件；*.doc代表所有doc文件”</param>
            <param name="so">查找文件的选项，是否包含子级文件夹</param>
            <returns>string[] 文件列表</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.AssertDirExist(System.String)">
            <summary>
            确保文件夹被创建
            </summary>
            <param name="filePath">文件夹全名（含路径）</param>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.IsExistDirectory(System.String)">
            <summary>
            检测指定目录是否存在
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <returns>bool 是否存在</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.IsEmptyDirectory(System.String)">
            <summary>
            检测指定目录是否为空
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <returns>bool 是否为空</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.ContainFile(System.String,System.String)">
            <summary>
            检测指定目录中是否存在指定的文件,若要搜索子目录请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <returns>bool 是否包含文件</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.ContainFile(System.String,System.String,System.Boolean)">
            <summary>
            检测指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
            <returns>bool 是否包含文件</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetCurrentDirectory">
            <summary>
            取当前目录
            </summary>
            <returns>当前目录名</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.SetCurrentDirectory(System.String)">
            <summary>
            设当前目录
            </summary>
            <param name="path">目录绝对路径</param>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetInvalidPathChars">
            <summary>
            取路径中不充许存在的字符
            </summary>
            <returns>不充许存在的字符</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetAllDrives">
            <summary>
            取系统所有的逻辑驱动器
            </summary>
            <returns>所有的逻辑驱动器</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetFileNames(System.String)">
            <summary>
            获取指定目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <returns>所有文件列表</returns>
        </member>
        <member name="M:fyUtilitylib.fyDirHelper.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
            <returns>指定目录及子目录中所有文件列表</returns>
        </member>
        <member name="T:fyUtilitylib.fyWellHeadsRow">
            <summary>
            井头的行
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellHeadsRow.WellName">
            <summary>
            井名
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellHeadsRow.X">
            <summary>
            X坐标
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellHeadsRow.Y">
            <summary>
            Y坐标
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellHeadsRow.TD_MD">
            <summary>
            测深（测深是从方钻杆平台到井底的测量深度）
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyWellHeads">
            <summary>
            名称:fyWellHeads 井头数据
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellHeads.RowsCount">
            <summary>
            数据行数
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellHeads.Dt">
            <summary>
            数据表缓存区
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellHeads.CurveNames">
            <summary>
            曲线名称（数组）
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellHeads.WellNames">
            <summary>
            所有井的名称（数组）
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyWellHeads.#ctor(System.Data.DataTable)">
            <summary>
            构造函数
            </summary>
            <param name="WellHeadsDataTable"></param>
        </member>
        <member name="M:fyUtilitylib.fyWellHeads.ConvertToList">
            <summary>
            转换为List
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyWellHeadsHelper_Petrel2014">
            <summary>
            名称:fyWellHeadsHelper_Petrel2014 Petrel2014导出的井头文件读取帮助类
            作用:读取Petrel2014井头文件
            作者:喻思羽
            时间:2017-1-4
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyWellHeadsHelper_Petrel2014.InterpretFromText(System.String)">
            <summary>
            解析WellHeadsText，返回DataTable格式的WellHeads数据
            </summary>
            <param name="WellHeadsText"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyWellHeadsHelper_Petrel2014.InterpretFromFile(System.String)">
            <summary>
            输入WellHeads的文件，解析WellHeadsText
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyWellHeadsHelper_Petrel2014.ReadFromFile(System.String)">
            <summary>
            从WellHeads文件读取井头数据
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyWellHeadsHelper_Petrel2014.GetCurveNames(System.String[])">
            <summary>
            提取WellHeads的列名
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyWellTops">
            <summary>
            
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellTops.RowsCount">
            <summary>
            数据行数
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellTops.Dt">
            <summary>
            数据表缓存区
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellTops.CurveNames">
            <summary>
            曲线名称（数组）
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyWellTops.WellNames">
            <summary>
            所有井的名称（数组）
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyWellTops.#ctor(System.Data.DataTable)">
            <summary>
            构造函数
            </summary>
            <param name="WellTopsDataTable"></param>
        </member>
        <member name="T:fyUtilitylib.fyWellTopDataRow">
            <summary>
            
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyLAS">
            <summary>
            测井曲线数据对象
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLAS.WellName">
            <summary>
            井名
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLAS.Dt">
            <summary>
            数据缓存
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLAS.CurveNames">
            <summary>
            曲线列名(数组)
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyLAS.#ctor(System.Data.DataTable)">
            <summary>
            构造函数
            </summary>
            <param name="LASDataTable"></param>
        </member>
        <member name="M:fyUtilitylib.fyLAS.CutOffByWellTops(fyUtilitylib.fyWellTops)">
            <summary>
            使用分层数据对测井数据进行截断
            </summary>
            <param name="WellTops"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyLASDataRow">
            <summary>
            Las Row
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLASDataRow.DEPTH">
            <summary>
            深度
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLASDataRow.Por">
            <summary>
            孔隙度
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLASDataRow.Perm">
            <summary>
            渗透率
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLASDataRow.Well">
            <summary>
            井名
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLASDataRow.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLASDataRow.Surface">
            <summary>
            
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyWellTopsHelper_Petrel2014">
            <summary>
            WellTops(Petrel2014导出格式) 帮助类
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyWellTopsHelper_Petrel2014.InterpretFromWellTopsText(System.String)">
            <summary>
            解析WellTopsText，返回DataTable格式的WellTops数据
            </summary>
            <param name="WellTopsText"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyWellTopsHelper_Petrel2014.InterpretFromWellTopsFile(System.String)">
            <summary>
            输入WellTops的文件，解析WellTopsText，返回DataTable格式的WellTops数据
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyWellTopsHelper_Petrel2014.ReadFromWellTopsFile(System.String)">
            <summary>
            从WellTops文件读取分层数据
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyWellTopsHelper_Petrel2014.GetCurveNames(System.String[])">
            <summary>
            提取WellTops的列名
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyLASHelper_Petrel2014">
            <summary>
            LAS格式(Petrel2014导出格式) 帮助类
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyLASHelper_Petrel2014.InterpretFromLASText(System.String)">
            <summary>
            解析LASText，返回DataTable格式的测井曲线数据
            </summary>
            <param name="LASText"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyLASHelper_Petrel2014.InterpretFromLASFile(System.String)">
            <summary>
            输入LAS的文件，解析LASText，返回DataTable格式的测井曲线数据
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyLASHelper_Petrel2014.ReadFromLASFile(System.String)">
            <summary>
            从LAS格式文件读取
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyLASHelper_Petrel2014.GetCurveNames(System.String[])">
            <summary>
            提取测井曲线的列名
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyGSLIBDataHelper">
            <summary>
            名称：fyGSLIBDataHelper
            作者：喻思羽
            时间：2014-6-17
            fyGSDataServerV6_2类库
            fyGSLIBDataAdapter类添加了两个方法
            1.ContainsField（用于判断GSLIB格式数据是否包含某个字段）
            2.GetSubsetByFields（用于从GSLIB格式数据里提取某些字段的列数据，作为一个新的GSLIB格式数据）
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyGSLIBDataHelper.Read(System.String,System.String[])">
            <summary>
            读取GSLIB文件到DataTable
            bug：千万数量级的数据无法加载，内存泄露
            </summary>
            <param name="FileName">GSLIB文件路径</param>
            <param name="Separator">分割符号</param>
        </member>
        <member name="M:fyUtilitylib.fyGSLIBDataHelper.Read(System.String[],System.String,System.String[])">
            <summary>
            读取GSLIB文件到DataTable
            </summary>
            <param name="Fields">字段名称</param>
            <param name="FileName">文件名称</param>
            <param name="Separator">分割符号</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyGSLIBDataHelper.Write(System.String,System.Data.DataTable)">
            <summary>
            DataTable写入GSLIB文件
            </summary>
            <param name="FileName"></param>
            <param name="dt"></param>
        </member>
        <member name="M:fyUtilitylib.fyGSLIBDataHelper.Write(System.String[],System.String,System.Data.DataTable)">
            <summary>
            DataTable写入GSLIB文件
            </summary>
            <param name="Fields"></param>
            <param name="FileName"></param>
            <param name="dt"></param>
        </member>
        <member name="T:fyUtilitylib.fyXMLHelper_Alternative3">
            <summary>
            名称：fyXMLHelper_Alternative3
            作用：XML帮助类(XML与DataTable转换类)
            作者：喻思羽
            时间：2016-1-9
            来源：http://blog.csdn.net/lzy_1515/article/details/6072670
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative3.GetDataTable(System.String)">
            <summary>
            xml转换为DataTable
            </summary>
            <param name="xmlStr"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative3.GetXml(System.Data.DataTable)">
            <summary>
            DataTable转换为xml
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyXMLHelper_Alternative2">
            <summary>
            名称：fyXMLHelper_Alternative2
            作用：XML帮助类
            作者：喻思羽
            时间：2016-1-9
            来源：【收集的Code】\【通用类库】100个C#辅助类\100个C#辅助类\DotNet.Utilities\XML操作类
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.XMLLoad">
            <summary>
            导入XML文件
            </summary>
            <param name="XMLPath">XML文件路径</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.XMLLoad(System.String)">
            <summary>
            导入XML文件
            </summary>
            <param name="XMLPath">XML文件路径</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.GetXmlFullPath(System.String)">
            <summary>
            返回完整路径
            </summary>
            <param name="strPath">Xml的路径</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Read(System.String)">
            <summary>
            读取指定节点的数据
            </summary>
            <param name="node">节点</param>
            使用示列:
            XMLProsess.Read("/Node", "")
            XMLProsess.Read("/Node/Element[@Attribute='Name']")
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Read(System.String,System.String)">
            <summary>
            读取指定路径和节点的串联值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时返回该属性值，否则返回串联值</param>
            使用示列:
            XMLProsess.Read(path, "/Node", "")
            XMLProsess.Read(path, "/Node/Element[@Attribute='Name']")
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Read(System.String,System.String,System.String)">
            <summary>
            读取指定路径和节点的属性值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时返回该属性值，否则返回串联值</param>
            使用示列:
            XMLProsess.Read(path, "/Node", "")
            XMLProsess.Read(path, "/Node/Element[@Attribute='Name']", "Attribute")
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.ReadAllChildallValue(System.String)">
            <summary>
            获取某一节点的所有孩子节点的值
            </summary>
            <param name="node">要查询的节点</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.ReadAllChild(System.String)">
            <summary>
            获取某一节点的所有孩子节点的值
            </summary>
            <param name="node">要查询的节点</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.GetDataViewByXml(System.String,System.String)">
            <summary> 
            读取XML返回经排序或筛选后的DataView
            </summary>
            <param name="strWhere">筛选条件，如:"name='kgdiwss'"</param>
            <param name="strSort"> 排序条件，如:"Id desc"</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.GetDataSetByXml(System.String)">
            <summary>
            读取XML返回DataSet
            </summary>
            <param name="strXmlPath">XML文件相对路径</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Insert(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="element">元素名，非空时插入新元素，否则在该元素中插入属性</param>
            <param name="attribute">属性名，非空时插入该元素属性值，否则插入元素值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Insert(path, "/Node", "Element", "", "Value")
            XMLProsess.Insert(path, "/Node", "Element", "Attribute", "Value")
            XMLProsess.Insert(path, "/Node", "", "Attribute", "Value")
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Insert(System.String,System.String,System.String,System.String[][])">
            <summary>
            插入数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="element">元素名，非空时插入新元素，否则在该元素中插入属性</param>
            <param name="strList">由XML属性名和值组成的二维数组</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.WriteXmlByDataSet(System.String,System.String[],System.String[])">
            <summary>
            插入一行数据
            </summary>
            <param name="strXmlPath">XML文件相对路径</param>
            <param name="Columns">要插入行的列名数组，如：string[] Columns = {"name","IsMarried"};</param>
            <param name="ColumnValue">要插入行每列的值数组，如：string[] ColumnValue={"XML大全","false"};</param>
            <returns>成功返回true,否则返回false</returns>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Update(System.String,System.String)">
            <summary>
            修改指定节点的数据
            </summary>
            <param name="node">节点</param>
            <param name="value">值</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Update(System.String,System.String,System.String)">
            <summary>
            修改指定节点的数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Insert(path, "/Node","Value")
            XMLProsess.Insert(path, "/Node","Value")
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Update(System.String,System.String,System.String,System.String)">
            <summary>
            修改指定节点的属性值(静态)
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时修改该节点属性值，否则修改节点值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Insert(path, "/Node", "", "Value")
            XMLProsess.Insert(path, "/Node", "Attribute", "Value")
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.UpdateXmlRow(System.String,System.String[],System.String[],System.String,System.String)">
            <summary>
            更改符合条件的一条记录
            </summary>
            <param name="strXmlPath">XML文件路径</param>
            <param name="Columns">列名数组</param>
            <param name="ColumnValue">列值数组</param>
            <param name="strWhereColumnName">条件列名</param>
            <param name="strWhereColumnValue">条件列值</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Delete(System.String,System.String)">
            <summary>
            删除节点值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时删除该节点属性值，否则删除节点值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Delete(path, "/Node", "")
            XMLProsess.Delete(path, "/Node", "Attribute")
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.Delete(System.String,System.String,System.String)">
            <summary>
            删除数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时删除该节点属性值，否则删除节点值</param>
            <param name="value">值</param>
            使用示列:
            XMLProsess.Delete(path, "/Node", "")
            XMLProsess.Delete(path, "/Node", "Attribute")
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.DeleteXmlAllRows(System.String)">
            <summary>
            删除所有行
            </summary>
            <param name="strXmlPath">XML路径</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.DeleteXmlRowByIndex(System.String,System.Int32)">
            <summary>
            通过删除DataSet中指定索引行，重写XML以实现删除指定行
            </summary>
            <param name="iDeleteRow">要删除的行在DataSet中的Index值</param>
        </member>
        <member name="M:fyUtilitylib.fyXMLHelper_Alternative2.DeleteXmlRows(System.String,System.String,System.String[])">
            <summary>
            删除指定列中指定值的行
            </summary>
            <param name="strXmlPath">XML相对路径</param>
            <param name="strColumn">列名</param>
            <param name="ColumnValue">指定值</param>
        </member>
        <member name="T:fyUtilitylib.fyJsonHepler_Alternative1">
            <summary>
            来源：http://www.open-open.com/lib/view/open1391265479317.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            List转成json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonName"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.JsonSerializerByArrayData``1(``0[])">
            <summary>
            序列化集合对象
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.JsonSerializerBySingleData``1(``0)">
            <summary>
            序列化单个对象
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.JsonDeserializeBySingleData``1(System.String)">
            <summary>
            反序列化单个对象
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.JsonDeserializeByArrayData``1(System.String)">
            <summary>
            反序列化集合对象
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ConvertJsonDateToDateString(System.Text.RegularExpressions.Match)">
            <summary>
            将Json序列化的时间由/Date(1294499956278+0800)转为字符串
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ConvertDateStringToJsonDate(System.Text.RegularExpressions.Match)">
            <summary> 
            将时间字符串转为Json时间
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ListToJson``1(System.Collections.Generic.IList{``0})">
            <summary>
            List转成json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ToJson(System.Object)">
            <summary>
            对象转换为Json字符串
            </summary>
            <param name="jsonObject">对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ToJson(System.Collections.IEnumerable)">
            <summary>
            对象集合转换Json
            </summary>
            <param name="array">集合对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ToArrayString(System.Collections.IEnumerable)">
            <summary>
            普通集合转换Json
            </summary>
            <param name="array">集合对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ToJson(System.Data.DataTable)">
            <summary>
            Datatable转换为Json
            </summary>
            <param name="table">Datatable对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ToJson(System.Data.DataTable,System.String)">
            <summary>
            DataTable转成Json
            </summary>
            <param name="jsonName"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ToJson(System.Data.IDataReader)">
            <summary>
            DataReader转换为Json
            </summary>
            <param name="dataReader">DataReader对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.ToJson(System.Data.DataSet)">
            <summary>
            DataSet转换为Json
            </summary>
            <param name="dataSet">DataSet对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.String2Json(System.String)">
            <summary>
            过滤特殊字符
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyJsonHepler_Alternative1.StringFormat(System.String,System.Type)">
            <summary>
            格式化字符型、日期型、布尔型
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyXMLHelper_Alternative1">
            <summary>
            名称：fyXMLHelper_Alternative1
            作用：XML帮助类
            作者：喻思羽
            时间：2016-1-9
            来源：http://blog.csdn.net/lzy_1515/article/details/6072670
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyEasyLogHelper">
            <summary>
            简单日志操作类
            来源：网络
            原名：LogClass
            
            说明
            使用时，遇到过一个问题——不能并发写日志
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyEasyLogHelper.WriteLogFile(System.String)">
            <summary>
            写入日志文件
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:fyUtilitylib.fyEasyLogHelper.WriteLogFile(System.String,System.DateTime)">
            <summary>
            写入日志文件
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:fyUtilitylib.fyExcelHelper_NPOI">
            <summary>
            基于NPOI的Excel辅助类
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ExportDT(System.Data.DataTable,System.String)">
            <summary>
            DataTable导出到Excel的MemoryStream
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ExportDTtoExcel(System.Data.DataTable,System.String,System.String)">
            <summary>
            DataTable导出到Excel文件
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">保存位置</param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ImportExcel2003toDt(System.String)">
            <summary>读取excel
            默认第一行为标头
            </summary>
            <param name="strFileName">excel文档路径</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ImportExcel2007toDt(System.String)">
            <summary>读取excel
            默认第一行为标头
            </summary>
            <param name="strFileName">excel文档路径</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ImportExcel2003toDt(System.String,System.String,System.Int32)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ImportExcel2007toDt(System.String,System.String,System.Int32)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ImportExcel2003toDt(System.String,System.Int32,System.Int32)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet序号</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ImportExcel2007toDt(System.String,System.Int32,System.Int32)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet序号</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ImportExcel2003toDt(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ImportExcel2003toDt(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            读取excel
            </summary>
            <param name="strFileName">excel文件路径</param>
            <param name="sheet">需要导出的sheet序号</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.ImportExcel2007InDt(NPOI.SS.UserModel.ISheet,System.Int32,System.Boolean)">
            <summary>
            将制定sheet中的数据导出到datatable中
            </summary>
            <param name="sheet">需要导出的sheet</param>
            <param name="HeaderRowIndex">列头所在行号，-1表示没有列头</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.UpdateExcel(System.String,System.String,System.String[],System.Int32,System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluid">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.UpdateExcel(System.String,System.String,System.String[][],System.Int32[],System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluids">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.UpdateExcel(System.String,System.String,System.Double[],System.Int32,System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluid">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI.UpdateExcel(System.String,System.String,System.Double[][],System.Int32[],System.Int32)">
            <summary>
            更新Excel表格
            </summary>
            <param name="outputFile">需更新的excel表格路径</param>
            <param name="sheetname">sheet名</param>
            <param name="updateData">需更新的数据</param>
            <param name="coluids">需更新的列号</param>
            <param name="rowid">需更新的开始行号</param>
        </member>
        <member name="T:fyUtilitylib.fyExcelHelper_NPOI_Alternative1">
            <summary>
            基于NPOI的Excel辅助类1
            来源：网络
            网址：http://blog.csdn.net/halym/article/details/9235823
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative1.ExcelToTableForXLS(System.String)">
            <summary>
            将Excel文件中的数据读出到DataTable中(xls)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative1.TableToExcelForXLS(System.Data.DataTable,System.String)">
            <summary>
            将DataTable数据导出到Excel文件中(xls)
            </summary>
            <param name="dt"></param>
            <param name="file"></param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative1.GetValueTypeForXLS(NPOI.HSSF.UserModel.HSSFCell)">
            <summary>
            获取单元格类型(xls)
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative1.ExcelToTableForXLSX(System.String)">
            <summary>
            将Excel文件中的数据读出到DataTable中(xlsx)
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative1.TableToExcelForXLSX(System.Data.DataTable,System.String)">
            <summary>
            将DataTable数据导出到Excel文件中(xlsx)
            </summary>
            <param name="dt"></param>
            <param name="file"></param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative1.GetValueTypeForXLSX(NPOI.XSSF.UserModel.XSSFCell)">
            <summary>
            获取单元格类型(xlsx)
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyExcelHelper_NPOI_Alternative2">
            <summary>
            基于NPOI的Excel辅助类2
            来源：网络
            C#中npoi操作Excel[版本2.0.1读写2003、2007格式] 
            http://www.2cto.com/kf/201308/232999.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative2.ReadExcel(System.String,System.Int32,fyUtilitylib.NpoiDataType[])">
            <summary>
            读取Excel文件内容转换为DataSet,列名依次为 "c0"……c[columnlength-1]
            </summary>
            <param name="FileName">文件绝对路径</param>
            <param name="startRow">数据开始行数(1为第一行)</param>
            <param name="ColumnDataType">每列的数据类型</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative2.CreateExcel2003(System.String,System.String,System.Data.DataSet,System.Int32,fyUtilitylib.NpoiDataType[])">
            <summary>
            从DataSet导出到MemoryStream流2003
            </summary>
            <param name="SaveFileName">文件保存路径</param>
            <param name="SheetName">Excel文件中的Sheet名称</param>
            <param name="ds">存储数据的DataSet</param>
            <param name="startRow">从哪一行开始写入，从0开始</param>
            <param name="datatypes">DataSet中的各列对应的数据类型</param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative2.CreateExcel2007(System.String,System.String,System.Data.DataSet,System.Int32,fyUtilitylib.NpoiDataType[])">
            <summary>
            从DataSet导出到MemoryStream流2007
            </summary>
            <param name="SaveFileName">文件保存路径</param>
            <param name="SheetName">Excel文件中的Sheet名称</param>
            <param name="ds">存储数据的DataSet</param>
            <param name="startRow">从哪一行开始写入，从0开始</param>
            <param name="datatypes">DataSet中的各列对应的数据类型</param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative2.GetDataTableType(fyUtilitylib.NpoiDataType)">
            <summary>
            读Excel-根据NpoiDataType创建的DataTable列的数据类型
            </summary>
            <param name="datatype"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative2.GetCellData(fyUtilitylib.NpoiDataType,NPOI.SS.UserModel.IRow,System.Int32)">
            <summary>
            读Excel-得到不同数据类型单元格的数据
            </summary>
            <param name="datatype">数据类型</param>
            <param name="row">数据中的一行</param>
            <param name="column">哪列</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative2.GetCellDataType(NPOI.SS.UserModel.ICell)">
            <summary>
            获取单元格数据类型
            </summary>
            <param name="hs"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.NpoiDataType">
            <summary>
            枚举(Excel单元格数据类型)
            </summary>
        </member>
        <member name="F:fyUtilitylib.NpoiDataType.String">
            <summary>
            字符串类型-值为1
            </summary>
        </member>
        <member name="F:fyUtilitylib.NpoiDataType.Bool">
            <summary>
            布尔类型-值为2
            </summary>
        </member>
        <member name="F:fyUtilitylib.NpoiDataType.Datetime">
            <summary>
            时间类型-值为3
            </summary>
        </member>
        <member name="F:fyUtilitylib.NpoiDataType.Numeric">
            <summary>
            数字类型-值为4
            </summary>
        </member>
        <member name="F:fyUtilitylib.NpoiDataType.Richtext">
            <summary>
            复杂文本类型-值为5
            </summary>
        </member>
        <member name="F:fyUtilitylib.NpoiDataType.Blank">
            <summary>
            空白
            </summary>
        </member>
        <member name="F:fyUtilitylib.NpoiDataType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyExcelHelper_NPOI_Alternative3">
            <summary>
            基于NPOI的Excel辅助类3
            网址：http://www.cnblogs.com/luxiaoxun/p/3374992.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative3.DataTableToExcel(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            将DataTable数据导入到excel中
            </summary>
            <param name="data">要导入的数据</param>
            <param name="isColumnWritten">DataTable的列名是否要导入</param>
            <param name="sheetName">要导入的excel的sheet的名称</param>
            <returns>导入数据行数(包含列名那一行)</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_NPOI_Alternative3.ExcelToDataTable(System.String,System.Boolean)">
            <summary>
            将excel中的数据导入到DataTable中
            </summary>
            <param name="sheetName">excel工作薄sheet的名称</param>
            <param name="isFirstRowColumn">第一行是否是DataTable的列名</param>
            <returns>返回的DataTable</returns>
        </member>
        <!-- 对于成员“T:fyUtilitylib.fyExcelHelper_NPOI_Perfect”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:fyUtilitylib.fyExcelHelper_NPOI_Perfect.ExcelToTable(System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:fyUtilitylib.fyExcelHelper_NPOI_Perfect.TableToExcel(System.Data.DataTable,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="T:fyUtilitylib.fyExcelHelper_OleDb">
            <summary>
            Excel 操作类
            来源：网络
            原名：MyDirHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyExcelHelper_OleDb.ExcelType">
            <summary>
            Excel 版本
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyExcelHelper_OleDb.IMEXType">
            <summary>
            IMEX 三种模式。
            IMEX是用来告诉驱动程序使用Excel文件的模式，其值有0、1、2三种，分别代表导出、导入、混合模式。
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.GetExcelConnectstring(System.String,System.Boolean,fyUtilitylib.fyExcelHelper_OleDb.ExcelType)">
            <summary>
            返回Excel 连接字符串   [IMEX=1]
            </summary>
            <param name="excelPath">Excel文件 绝对路径</param>
            <param name="header">是否把第一行作为列名</param>
            <param name="eType">Excel 版本 </param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.GetExcelConnectstring(System.String,System.Boolean,fyUtilitylib.fyExcelHelper_OleDb.ExcelType,fyUtilitylib.fyExcelHelper_OleDb.IMEXType)">
            <summary>
            返回Excel 连接字符串
            </summary>
            <param name="excelPath">Excel文件 绝对路径</param>
            <param name="header">是否把第一行作为列名</param>
            <param name="eType">Excel 版本 </param>
            <param name="imex">IMEX模式</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.GetExcelTablesName(System.String,fyUtilitylib.fyExcelHelper_OleDb.ExcelType)">
            <summary>
            返回Excel工作表名
            </summary>
            <param name="excelPath">Excel文件 绝对路径</param>
            <param name="eType">Excel 版本 </param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.GetExcelTablesName(System.String)">
            <summary>
            返回Excel工作表名
            </summary>
            <param name="connectstring">excel连接字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.GetExcelTablesName(System.Data.OleDb.OleDbConnection)">
            <summary>
            返回Excel工作表名
            </summary>
            <param name="connection">excel连接</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.GetExcelFirstTableName(System.String,fyUtilitylib.fyExcelHelper_OleDb.ExcelType)">
            <summary>
            返回Excel第一个工作表表名
            </summary>
            <param name="excelPath">Excel文件 绝对路径</param>
            <param name="eType">Excel 版本 </param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.GetExcelFirstTableName(System.String)">
            <summary>
            返回Excel第一个工作表表名
            </summary>
            <param name="connectstring">excel连接字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.GetExcelFirstTableName(System.Data.OleDb.OleDbConnection)">
            <summary>
            返回Excel第一个工作表表名
            </summary>
            <param name="connection">excel连接</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.GetColumnsList(System.String,fyUtilitylib.fyExcelHelper_OleDb.ExcelType,System.String)">
            <summary>
            获取Excel文件中指定工作表的列
            </summary>
            <param name="excelPath">Excel文件 绝对路径</param>
            <param name="eType">ExcelType</param>
            <param name="table">名称 excel table  例如：Sheet1$</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.ExcelToDataSet(System.String,System.String,System.Boolean,fyUtilitylib.fyExcelHelper_OleDb.ExcelType)">
            <summary>
            EXCEL导入DataSet
            </summary>
            <param name="excelPath">Excel文件 绝对路径</param>
            <param name="table">名称 excel table  例如：Sheet1$ </param>
            <param name="header">是否把第一行作为列名</param>
            <param name="eType">Excel 版本 </param>
            <returns>返回Excel相应工作表中的数据 DataSet   [table不存在时返回空的DataSet]</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.IsExistExcelTableName(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            判断工作表名是否存在
            </summary>
            <param name="connection">excel连接</param>
            <param name="table">名称 excel table  例如：Sheet1$</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.ExcelToDataSet(System.String,System.String)">
            <summary>
            EXCEL导入DataSet
            </summary>
            <param name="connectstring">excel连接字符串</param>
            <param name="table">名称 excel table  例如：Sheet1$ </param>
            <returns>返回Excel相应工作表中的数据 DataSet   [table不存在时返回空的DataSet]</returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.ExcelToDataSet(System.String,System.Boolean,fyUtilitylib.fyExcelHelper_OleDb.ExcelType)">
            <summary>
            EXCEL所有工作表导入DataSet
            </summary>
            <param name="excelPath">Excel文件 绝对路径</param>
            <param name="header">是否把第一行作为列名</param>
            <param name="eType">Excel 版本 </param>
            <returns>返回Excel第一个工作表中的数据 DataSet </returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.ExcelToDataSet(System.String)">
            <summary>
            EXCEL所有工作表导入DataSet
            </summary>
            <param name="connectstring">excel连接字符串</param>
            <returns>返回Excel第一个工作表中的数据 DataSet </returns>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.DataSetToExcel(System.Data.DataSet,System.String)">
            <summary>
            把一个数据集中的数据导出到Excel文件中(XML格式操作)
            </summary>
            <param name="source">DataSet数据</param>
            <param name="fileName">保存的Excel文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyExcelHelper_OleDb.DataSetToExcel(System.Data.DataTable,System.String)">
            <summary>
            将DataTable导出为Excel(OleDb 方式操作）
            </summary>
            <param name="dataTable">表</param>
            <param name="fileName">导出默认文件名</param>
        </member>
        <member name="T:fyUtilitylib.fyEZLogHelper">
            <summary>
            日志操作类
            来源：网络codeproject
            链接：http://www.codeproject.com/Articles/16642/EZLogger-drop-dead-easy-logging
            
            说明
            EZLogger is an object that provides basic logging facilities to your application. 
            EZLogger is a lightweight alternative to more feature-rich logging subsystems such
            as Log4Net and XQuiSoft Logging, both of which are excellent logging mechanisms. 
            I wrote EZLogger because my application's logging needs were simple and I wanted 
            to keep my app's footprint small. I hope you find EZLogger useful and welcome 
            your suggestions.
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyEZLogHelper.Level">
            <summary>
            Log levels.
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.Level.Debug">
            <summary>Log debug messages.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.Level.Info">
            <summary>Log informational messages.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.Level.Success">
            <summary>Log success messages.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.Level.Warning">
            <summary>Log warning messages.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.Level.Error">
            <summary>Log error messages.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.Level.Fatal">
            <summary>Log fatal errors.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.Level.All">
            <summary>Log all messages.</summary>
        </member>
        <member name="T:fyUtilitylib.fyEZLogHelper.State">
            <summary>
            The logger's state.
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.State.Stopped">
            <summary>The logger is stopped.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.State.Running">
            <summary>The logger has been started.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper.State.Paused">
            <summary>The logger is paused.</summary>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.#ctor(System.String,System.Boolean,System.UInt32)">
            <summary>
            Constructs a EZLogger.
            </summary>
            <param name="logFilename">Log file to receive output.</param>
            <param name="bAppend">Flag: append to existing file (if any).</param>
            <param name="logLevels">Mask indicating log levels of interest.</param>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.#ctor">
            <summary>
            Private default constructor.
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyEZLogHelper.Levels">
            <summary>
            Gets and sets the log level.
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyEZLogHelper.LoggerState">
            <summary>
            Retrieves the logger's state.
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Start">
            <summary>
            Starts logging.
            </summary>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Pause">
            <summary>
            Temporarily suspends logging.
            </summary>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Resume">
            <summary>
            Resumes logging.
            </summary>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Stop">
            <summary>
            Stops logging.
            </summary>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Debug(System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="msg">The message.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Info(System.String)">
            <summary>
            Logs an informational message.
            </summary>
            <param name="msg">The message.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Success(System.String)">
            <summary>
            Logs a success message.
            </summary>
            <param name="msg">The message.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Warning(System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="msg">The message.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="msg">The message.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.Fatal(System.String)">
            <summary>
            Logs a fatal error message.
            </summary>
            <param name="msg">The message.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.GetMessageCount(System.UInt32)">
            <summary>
            Retrieves the count of messages logged at one or more levels.
            </summary>
            <param name="levelMask">Mask indicating levels of interest.</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyEZLogHelper.WriteLogMsg(fyUtilitylib.fyEZLogHelper.Level,System.String)">
            <summary>
            Writes a log message.
            </summary>
            <param name="level"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._logFilename">
            <summary>Name of the log file.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._bAppend">
            <summary>Flag: append to existing file (if any).</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._logFile">
            <summary>The log file.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._levels">
            <summary>Levels to be logged.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._state">
            <summary>The logger's state.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._debugMsgs">
            <summary>Number of debug messages that have been logged.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._infoMsgs">
            <summary>Number of informational messages that have been logged.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._successMsgs">
            <summary>Number of success messages that have been logged.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._warningMsgs">
            <summary>Number of warning messages that have been logged.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._errorMsgs">
            <summary>Number of error messages that have been logged.</summary>
        </member>
        <member name="F:fyUtilitylib.fyEZLogHelper._fatalMsgs">
            <summary>Number of fatal messages that have been logged.</summary>
        </member>
        <member name="T:fyUtilitylib.FileData">
            <summary>
            Contains information about a file returned by the 
            <see cref="!:FastDirectoryEnumerator"/> class.
            </summary>
        </member>
        <member name="F:fyUtilitylib.FileData.Attributes">
            <summary>
            Attributes of the file.
            </summary>
        </member>
        <member name="F:fyUtilitylib.FileData.CreationTimeUtc">
            <summary>
            File creation time in UTC
            </summary>
        </member>
        <member name="P:fyUtilitylib.FileData.LastAccesTime">
            <summary>
            Gets the last access time in local time.
            </summary>
        </member>
        <member name="F:fyUtilitylib.FileData.LastAccessTimeUtc">
            <summary>
            File last access time in UTC
            </summary>
        </member>
        <member name="P:fyUtilitylib.FileData.LastWriteTime">
            <summary>
            Gets the last access time in local time.
            </summary>
        </member>
        <member name="F:fyUtilitylib.FileData.LastWriteTimeUtc">
            <summary>
            File last write time in UTC
            </summary>
        </member>
        <member name="F:fyUtilitylib.FileData.Size">
            <summary>
            Size of the file in bytes
            </summary>
        </member>
        <member name="F:fyUtilitylib.FileData.Name">
            <summary>
            Name of the file
            </summary>
        </member>
        <member name="F:fyUtilitylib.FileData.Path">
            <summary>
            Full path to the file.
            </summary>
        </member>
        <member name="M:fyUtilitylib.FileData.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:fyUtilitylib.FileData.#ctor(System.String,fyUtilitylib.WIN32_FIND_DATA)">
            <summary>
            Initializes a new instance of the <see cref="T:fyUtilitylib.FileData"/> class.
            </summary>
            <param name="dir">The directory that the file is stored at</param>
            <param name="findData">WIN32_FIND_DATA structure that this
            object wraps.</param>
        </member>
        <member name="T:fyUtilitylib.WIN32_FIND_DATA">
            <summary>
            Contains information about the file that is found 
            by the FindFirstFile or FindNextFile functions.
            </summary>
        </member>
        <member name="M:fyUtilitylib.WIN32_FIND_DATA.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:fyUtilitylib.fyFastDirectoryEnumeratorHelper">
            <summary>
            A fast enumerator of files in a directory.  Use this if you need to get attributes for 
            all files in a directory.
            </summary>
            <remarks>
            This enumerator is substantially faster than using <see cref="M:System.IO.Directory.GetFiles(System.String)"/>
            and then creating a new FileInfo object for each path.  Use this version when you 
            will need to look at the attibutes of each file returned (for example, you need
            to check each file in a directory to see if it was modified after a specific date).
            </remarks>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.EnumerateFiles(System.String)">
            <summary>
            Gets <see cref="T:fyUtilitylib.FileData"/> for all the files in a directory.
            </summary>
            <param name="path">The path to search.</param>
            <returns>An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and 
            allows you to enumerate the files in the given directory.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a null reference (Nothing in VB)
            </exception>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.EnumerateFiles(System.String,System.String)">
            <summary>
            Gets <see cref="T:fyUtilitylib.FileData"/> for all the files in a directory that match a 
            specific filter.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against files in the path.</param>
            <returns>An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and 
            allows you to enumerate the files in the given directory.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a null reference (Nothing in VB)
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is a null reference (Nothing in VB)
            </exception>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets <see cref="T:fyUtilitylib.FileData"/> for all the files in a directory that 
            match a specific filter, optionally including all sub directories.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against files in the path.</param>
            <param name="searchOption">
            One of the SearchOption values that specifies whether the search 
            operation should include all subdirectories or only the current directory.
            </param>
            <returns>An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and 
            allows you to enumerate the files in the given directory.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a null reference (Nothing in VB)
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is a null reference (Nothing in VB)
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="searchOption"/> is not one of the valid values of the
            <see cref="T:System.IO.SearchOption"/> enumeration.
            </exception>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets <see cref="T:fyUtilitylib.FileData"/> for all the files in a directory that match a 
            specific filter.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against files in the path.</param>
            <returns>An object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> and 
            allows you to enumerate the files in the given directory.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is a null reference (Nothing in VB)
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filter"/> is a null reference (Nothing in VB)
            </exception>
        </member>
        <member name="T:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerable">
            <summary>
            Provides the implementation of the 
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerable.#ctor(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Initializes a new instance of the <see cref="T:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerable"/> class.
            </summary>
            <param name="path">The path to search.</param>
            <param name="filter">The search string to match against files in the path.</param>
            <param name="searchOption">
            One of the SearchOption values that specifies whether the search 
            operation should include all subdirectories or only the current directory.
            </param>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can 
            be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be 
            used to iterate through the collection.
            </returns>
        </member>
        <member name="T:fyUtilitylib.fyFastDirectoryEnumeratorHelper.SafeFindHandle">
            <summary>
            Wraps a FindFirstFile handle.
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.SafeFindHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:fyUtilitylib.fyFastDirectoryEnumeratorHelper.SafeFindHandle"/> class.
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.SafeFindHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
            <returns>
            true if the handle is released successfully; otherwise, in the 
            event of a catastrophic failure, false. In this case, it 
            generates a releaseHandleFailed MDA Managed Debugging Assistant.
            </returns>
        </member>
        <member name="T:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerator">
            <summary>
            Provides the implementation of the 
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> interface
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerator.SearchContext">
            <summary>
            Hold context information about where we current are in the directory search.
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerator.#ctor(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Initializes a new instance of the <see cref="T:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerator"/> class.
            </summary>
            <param name="path">The path to search.</param>
            <param name="filter">The search string to match against files in the path.</param>
            <param name="searchOption">
            One of the SearchOption values that specifies whether the search 
            operation should include all subdirectories or only the current directory.
            </param>
        </member>
        <member name="P:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, 
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:fyUtilitylib.fyFastDirectoryEnumeratorHelper.FileEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="T:fyUtilitylib.fyFileDialogHelper">
            <summary>
            文件对话框操作类
            来源：网络
            原名：MyFileDialogHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:MyFileDialogHelper"></see>
              class.
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenText">
            <summary>
            打开Txt对话框
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveText">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveText(System.String)">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <param name="filename">文件名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveText(System.String,System.String)">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <param name="filename">文件名</param>
            <param name="initialDirectory">目录</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenExcel">
            <summary>
            打开Excel对话框
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveExcel">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveExcel(System.String)">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <param name="filename">文件名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveExcel(System.String,System.String)">
            <summary>
            保存Excel对话框,并返回保存全路径
            </summary>
            <param name="filename">文件名</param>
            <param name="initialDirectory">目录</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenHtml">
            <summary>
            打开Html对话框
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveHtml">
            <summary>
            保存Html对话框,并返回保存全路径
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveHtml(System.String)">
            <summary>
            保存Html对话框,并返回保存全路径
            </summary>
            <param name="filename">文件名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveHtml(System.String,System.String)">
            <summary>
            保存Html对话框,并返回保存全路径
            </summary>
            <param name="filename">文件名</param>
            <param name="initialDirectory">目录</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenZip">
            <summary>
            Opens the Zip.
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenZip(System.String)">
            <summary>
            Opens the Zip.
            </summary>
            <param name="filename">文件名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveZip">
            <summary>
            Save the Zip
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveZip(System.String)">
            <summary>
            Save the Zip
            </summary>
            <param name="filename">文件名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveZip(System.String,System.String)">
            <summary>
            Save the Zip
            </summary>
            <param name="filename">文件名</param>
            <param name="initialDirectory">目录</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenImage">
            <summary>
            Opens the image.
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveImage">
            <summary>
            保存图片对话框,并返回保存全路径
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveImage(System.String)">
            <summary>
            保存图片对话框并设置默认文件名,并返回保存全路径
            </summary>
            <param name="filename">文件名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveImage(System.String,System.String)">
            <summary>
            保存图片对话框并设置默认文件名,并返回保存全路径
            </summary>
            <param name="filename">文件名</param>
            <param name="initialDirectory">目录</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveAccessDb">
            <summary>
            保存数据库备份对话框
            </summary>
            <returns>数据库备份路径</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveBakDb">
            <summary>
            保存数据库备份对话框
            </summary>
            <returns>数据库备份路径</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenBakDb(System.String)">
            <summary>
            数据库还原对话框
            </summary>
            <param name="file">还原文件路径</param>
            <returns>数据库还原路径</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenAccessDb">
            <summary>
            数据库还原对话框
            </summary>
            <returns>数据库还原路径</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.SaveConfig">
            <summary>
            保存配置文件备份对话框
            </summary>
            <returns>配置文件备份路径</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenConfig">
            <summary>
            配置文件还原对话框
            </summary>
            <returns>配置文件还原路径</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenDir">
            <summary>
            打开文件夹
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.OpenDir(System.String)">
            <summary>
            打开文件夹
            </summary>
            <param name="selectedPath">路径</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.Open(System.String,System.String,System.String)">
            <summary>
            Opens the specified title.
            </summary>
            <param name="title">The title.</param>
            <param name="filter">The filter.</param>
            <param name="filename">文件名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.Open(System.String,System.String)">
            <summary>
            Opens the specified title.
            </summary>
            <param name="title">The title.</param>
            <param name="filter">The filter.</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.Save(System.String,System.String,System.String)">
            <summary>
            Saves the specified tile.
            </summary>
            <param name="title">title</param>
            <param name="filter">The filter.</param>
            <param name="filename">文件名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.Save(System.String,System.String,System.String,System.String)">
            <summary>
            Saves the specified tile.
            </summary>
            <param name="title">title</param>
            <param name="filter">The filter.</param>
            <param name="filename">文件名</param>
            <param name="initialDirectory">目录</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.Save(System.String,System.String)">
            <summary>
            Saves the specified tile.
            </summary>
            <param name="title">title</param>
            <param name="filter">The filter.</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.PickColor">
            <summary>
            获取对话框颜色
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.PickColor(System.Drawing.Color)">
            <summary>
            获取对话框颜色
            </summary>
            <param name="color">颜色值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileDialogHelper.InitFilterByExtension(System.String)">
            <summary>
            根据文件的扩展名初始化Filter
            </summary>
            <param name="Extension"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyFileHelper">
            <summary>
            文件操作类
            来源：网络
            原名：MyConvertHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>bool 是否删除成功</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.GetFileName(System.String)">
            <summary>
            根据传来的文件全路径，获取文件名称部分默认包括扩展名
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>string 文件名称</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.GetFileName(System.String,System.Boolean)">
            <summary>
            根据传来的文件全路径，获取文件名称部分
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <param name="includeExtension">是否包括文件扩展名</param>
            <returns>string 文件名称</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.GetNewFileFullName(System.String)">
            <summary>
            根据传来的文件全路径，获取新的文件名称全路径,一般用作临时保存用
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>string 新的文件全路径名称</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.GetFileExtension(System.String)">
            <summary>
            根据传来的文件全路径，获取文件扩展名不包括“.”，如“doc”
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>string 文件扩展名</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.GetParentDirectory(System.String)">
            <summary>
            根据传来的文件全路径，获取其上一级目录
            网址：http://bbs.csdn.net/topics/350254818
            例如：
            d:/111/222/fileName.txt
            则返回
            d:/111/222/
            喻思羽 2015.5
            </summary>
            <param name="fileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.OpenFile(System.String)">
            <summary>
            根据传来的文件全路径，外部打开文件，默认用系统注册类型关联软件打开
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>bool 文件名称</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.GetFileSize(System.String)">
            <summary>
            根据传来的文件全路径，得到文件大小，规范文件大小称呼，如1ＧＢ以上，单位用ＧＢ，１ＭＢ以上，单位用ＭＢ，１ＭＢ以下，单位用ＫＢ
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>bool 文件大小</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.FileToStreamByte(System.String)">
            <summary>
            文件转换成二进制，返回二进制数组Byte[]
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <returns>byte[] 包含文件流的二进制数组</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.ByteStreamToFile(System.String,System.Byte[])">
            <summary>
            二进制数组Byte[]生成文件
            </summary>
            <param name="createFileFullPath">要生成的文件全路径</param>
            <param name="streamByte">要生成文件的二进制 Byte 数组</param>
            <returns>bool 是否生成成功</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.ByteStreamToFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            二进制数组Byte[]生成文件，并验证文件是否存在，存在则先删除
            </summary>
            <param name="createFileFullPath">要生成的文件全路径</param>
            <param name="streamByte">要生成文件的二进制 Byte 数组</param>
            <param name="fileExistsDelete">同路径文件存在是否先删除</param>
            <returns>bool 是否生成成功</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.ReadAndWriteFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            读写文件，并进行匹配文字替换
            </summary>
            <param name="pathRead">读取路径</param>
            <param name="pathWrite">写入路径</param>
            <param name="replaceStrings">替换字典</param>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.ReadFile(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="filePath">文件路径</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.WriteFile(System.String,System.String)">
            <summary>
            写入文件
            </summary>
            <param name="pathWrite">写入路径</param>
            <param name="content">内容</param>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.ReadAndAppendFile(System.String,System.String)">
            <summary>
            读取并附加文本
            </summary>
            <param name="filePath">文件路径</param>
            <param name="content">内容</param>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.CopyFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="sources">源文件</param>
            <param name="dest">目标文件</param>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.MoveFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="sources">源文件</param>
            <param name="dest">目标文件</param>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.IsExistFile(System.String)">
            <summary>
            检测指定文件是否存在,如果存在则返回true。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <returns>bool 是否存在文件</returns>
        </member>
        <member name="M:fyUtilitylib.fyFileHelper.InitFilterByExtension(System.String)">
            <summary>
            根据文件扩展名获取对应的文件过滤器
            </summary>
            <param name="Extension"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyFrameData">
            <summary>
            数据框类（数据表）
            用以替代Excel表
              Column1 Column2 Column3
            0    100      90      845
            1    294      70      777
            2    438      50      234
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyFrameDataHelper">
            <summary>
            数据框辅助类
            用于读取框式数据体
            例如——
                Column1 Column2 Column3 
                value11 value12 value13
                value21 value22 value23
                value31 value32 value33
                value41 value42 value43
            喻思羽 2015.5
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFrameDataHelper.Read4Txt(System.String,System.Boolean,System.String[])">
            <summary>
            读取数据（数据框格式）
            </summary>
            <param name="FileName"></param>
            <param name="header"></param>
            <param name="Separator"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyFrameDataHelper.Write4Txt(System.String,System.Text.Encoding,System.Boolean,System.Boolean,System.Data.DataTable)">
            <summary>
            写入数据（数据框格式）
            </summary>
            <param name="FileName">文件路径</param>
            <param name="Encoding">编码</param>
            <param name="header">文件头（列名）</param>
            <param name="UseScientificNotation">科学计数法</param>
            <param name="dt">数据表</param>
        </member>
        <member name="M:fyUtilitylib.fyFrameDataHelper.Write4Txt_StringFormat(System.String,System.Text.Encoding,System.Boolean,System.Data.DataTable)">
            <summary>
            写入数据（数据框格式）
            </summary>
            <param name="FileName">文件路径</param>
            <param name="Encoding">编码</param>
            <param name="header">文件头（列名）</param>
            <param name="UseScientificNotation">科学计数法</param>
            <param name="dt">数据表</param>
        </member>
        <!-- 对于成员“T:fyUtilitylib.fyFtpHelper”忽略有格式错误的 XML 注释 -->
        <member name="M:fyUtilitylib.fyFtpHelper.UploadFile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            上传文件到服务器
            </summary>
            <param name="hostName">服务器地址，如：ftp://192.168.1.101</param>
            <param name="fileName">上传的文件本地路径</param>
            <param name="uploadDir">上传到服务器的目录，如:ftp://192.168.1.101/Test </param>
            <param name="ftpUser">FTP的用户名</param>
            <param name="ftpPassWord">FTP的密码</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper.CreateDirection(System.String,System.String,System.String)">
            <summary>
            创建FTP目录，返回值是否创建成功
            </summary>
            <param name="ftpUri">FTP的目录</param>
            <param name="ftpUser">FTP的用户名</param>
            <param name="ftpPassWord">FTP的密码</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper.FtpIsExistsFile(System.String,System.String,System.String)">
            <summary>
            判断FTP上目录是否存在
            </summary>
            <param name="uri">FTP上的目录</param>
            <param name="ftpUser">FTP的用户名</param>
            <param name="ftpPassWord">FTP的密码</param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyFtpHelper_Alternative1">
            <summary>
            Ftp辅助类2
            来源：100个C#辅助类——DotNet.Utilities.FTP操作类.FTPClient
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.#ctor">
            <summary>
            缺省构造函数
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative1.strMsg">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative1.strReply">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative1.iReplyCode">
            <summary>
            服务器返回的应答码
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative1.socketControl">
            <summary>
            进行控制连接的socket
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative1.trType">
            <summary>
            传输模式
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative1.BLOCK_SIZE">
            <summary>
            接收和发送数据的缓冲区
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative1.ASCII">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative1.buffer">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative1.RemoteHost">
            <summary>
            FTP服务器IP地址
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative1.RemotePort">
            <summary>
            FTP服务器端口
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative1.RemotePath">
            <summary>
            当前服务器目录
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative1.RemoteUser">
            <summary>
            登录用户账号
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative1.RemotePass">
            <summary>
            用户登录密码
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative1.Connected">
            <summary>
            是否登录
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.Connect">
            <summary>
            建立连接 
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.DisConnect">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyFtpHelper_Alternative1.TransferType">
            <summary>
            传输模式:二进制类型、ASCII类型
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.SetTransferType(fyUtilitylib.fyFtpHelper_Alternative1.TransferType)">
            <summary>
            设置传输模式
            </summary>
            <param name="ttType">传输模式</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.GetTransferType">
            <summary>
            获得传输模式
            </summary>
            <returns>传输模式</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.Dir(System.String)">
            <summary>
            获得文件列表
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.GetFileInfo(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="strFileName">待删除文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.Rename(System.String,System.String)">
            <summary>
            重命名(如果新文件名与已有文件重名,将覆盖已有文件)
            </summary>
            <param name="strOldFileName">旧文件名</param>
            <param name="strNewFileName">新文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.Get(System.String,System.String)">
            <summary>
            下载一批文件
            </summary>
            <param name="strFileNameMask">文件名的匹配字符串</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.Get(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.GetNoBinary(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.Put(System.String,System.String)">
            <summary>
            上传一批文件
            </summary>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strFileNameMask">文件名匹配字符(可以包含*和?)</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.Put(System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.PutByGuid(System.String,System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.MkDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.RmDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.ChDir(System.String)">
            <summary>
            改变目录
            </summary>
            <param name="strDirName">新的工作目录名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.ReadReply">
            <summary>
            将一行应答字符串记录在strReply和strMsg,应答码记录在iReplyCode
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.CreateDataSocket">
            <summary>
            建立进行数据连接的socket
            </summary>
            <returns>数据连接socket</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.CloseSocketConnect">
            <summary>
            关闭socket连接(用于登录以前)
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.ReadLine">
            <summary>
            读取Socket返回的所有字符串
            </summary>
            <returns>包含应答码的字符串行</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative1.SendCommand(System.String)">
            <summary>
            发送命令并获取应答码和最后一行应答字符串
            </summary>
            <param name="strCommand">命令</param>
        </member>
        <member name="T:fyUtilitylib.fyFtpHelper_Alternative2">
            <summary>
            Ftp辅助类3
            来源：100个C#辅助类——DotNet.Utilities.FTP操作类.FTPHelper
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.#ctor(System.String,System.String,System.String,System.String)">
            <summary>  
            连接FTP服务器
            </summary>  
            <param name="FtpServerIP">FTP连接地址</param>  
            <param name="FtpRemotePath">指定FTP连接成功后的当前目录, 如果不指定即默认为根目录</param>  
            <param name="FtpUserID">用户名</param>  
            <param name="FtpPassword">密码</param>  
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.Upload(System.String)">
            <summary>  
            上传  
            </summary>   
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.Download(System.String,System.String)">
            <summary>  
            下载  
            </summary>   
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.Delete(System.String)">
            <summary>  
            删除文件  
            </summary>  
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.GetFilesDetailList">
            <summary>  
            获取当前目录下明细(包含文件和文件夹)  
            </summary>  
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.GetAllList(System.String)">
            <summary>  
            获取FTP文件列表(包括文件夹)
            </summary>   
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.GetFileList(System.String)">
            <summary>  
            获取当前目录下文件列表(不包括文件夹)  
            </summary>  
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.FileExist(System.String)">
            <summary>  
            判断当前目录下指定的文件是否存在  
            </summary>  
            <param name="RemoteFileName">远程文件名</param>  
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.MakeDir(System.String)">
            <summary>  
            创建文件夹  
            </summary>   
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.GetFileSize(System.String)">
            <summary>  
            获取指定文件大小  
            </summary>  
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.ReName(System.String,System.String)">
            <summary>  
            更改文件名  
            </summary> 
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.MovieFile(System.String,System.String)">
            <summary>  
            移动文件  
            </summary>  
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative2.GotoDirectory(System.String,System.Boolean)">
            <summary>  
            切换当前目录  
            </summary>  
            <param name="IsRoot">true:绝对路径 false:相对路径</param>   
        </member>
        <member name="T:fyUtilitylib.fyFtpHelper_Alternative3">
            <summary>
            Ftp辅助类4
            来源：100个C#辅助类——DotNet.Utilities.FTP操作类.FTPOperater
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative3.Ftp">
            <summary>
            全局FTP访问变量
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative3.Server">
            <summary>
            Ftp服务器
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative3.User">
            <summary>
            Ftp用户
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative3.Pass">
            <summary>
            Ftp密码
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative3.FolderZJ">
            <summary>
            Ftp密码
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative3.FolderWX">
            <summary>
            Ftp密码
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.GetList(System.String)">
            <summary>
            得到文件列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.GetFile(System.String,System.String,System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="ftpFolder">ftp目录</param>
            <param name="ftpFileName">ftp文件名</param>
            <param name="localFolder">本地目录</param>
            <param name="localFileName">本地文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.AddMSCFile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            修改文件
            </summary>
            <param name="ftpFolder">本地目录</param>
            <param name="ftpFileName">本地文件名temp</param>
            <param name="localFolder">本地目录</param>
            <param name="localFileName">本地文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.DelFile(System.String,System.String)">
            <summary>
            删除文件
            </summary>
            <param name="ftpFolder">ftp目录</param>
            <param name="ftpFileName">ftp文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.PutFile(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="ftpFolder">ftp目录</param>
            <param name="ftpFileName">ftp文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.GetFileNoBinary(System.String,System.String,System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="ftpFolder">ftp目录</param>
            <param name="ftpFileName">ftp文件名</param>
            <param name="localFolder">本地目录</param>
            <param name="localFileName">本地文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.GetFileInfo(System.String,System.String)">
            <summary>
            得到FTP上文件信息
            </summary>
            <param name="ftpFolder">FTP目录</param>
            <param name="ftpFileName">ftp文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.CanConnect">
            <summary>
            测试FTP服务器是否可登陆
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.GetFileInfoConnected(System.String,System.String)">
            <summary>
            得到FTP上文件信息
            </summary>
            <param name="ftpFolder">FTP目录</param>
            <param name="ftpFileName">ftp文件名</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.GetFileList(System.String,System.String)">
            <summary>
            得到文件列表
            </summary>
            <param name="ftpFolder">FTP目录</param>
            <returns>FTP通配符号</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative3.getFtpClient">
             <summary>
            得到FTP传输对象
             </summary>
        </member>
        <member name="T:fyUtilitylib.fyFtpHelper_Alternative4">
            <summary>
            Ftp辅助类5
            来源：WHC.OrderWater.Commons.FTPHelper
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative4.server">
            <summary>
            IP address or hostname to connect to
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative4.user">
            <summary>
            Username to login as
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative4.pass">
            <summary>
            Password for account
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative4.port">
            <summary>
            Port number the FTP server is listening on
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyFtpHelper_Alternative4.timeout">
            <summary>
            The timeout (miliseconds) for waiting on data to arrive
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="server">Server to connect to</param>
            <param name="user">Account to login as</param>
            <param name="pass">Account password</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="server">Server to connect to</param>
            <param name="port">Port server is listening on</param>
            <param name="user">Account to login as</param>
            <param name="pass">Account password</param>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative4.IsConnected">
            <summary>
            Connection status to the server
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative4.MessagesAvailable">
            <summary>
            Returns true if the message buffer has data in it
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative4.Messages">
            <summary>
            Server messages if any, buffer is cleared after you access this property
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative4.ResponseString">
            <summary>
            The response string from the last issued command
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative4.BytesTotal">
            <summary>
            The total number of bytes sent/recieved in a transfer
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative4.FileSize">
            <summary>
            The size of the file being downloaded/uploaded (Can possibly be 0 if no size is available)
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyFtpHelper_Alternative4.PassiveMode">
            <summary>
            True:  Passive mode [default]
            False: Active Mode
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.Disconnect">
            <summary>
            Closes all connections to the ftp server
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.Connect(System.String,System.Int32,System.String,System.String)">
            <summary>
            Connect to a ftp server
            </summary>
            <param name="server">IP or hostname of the server to connect to</param>
            <param name="port">Port number the server is listening on</param>
            <param name="user">Account name to login as</param>
            <param name="pass">Password for the account specified</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.Connect(System.String,System.String,System.String)">
            <summary>
            Connect to a ftp server
            </summary>
            <param name="server">IP or hostname of the server to connect to</param>
            <param name="user">Account name to login as</param>
            <param name="pass">Password for the account specified</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.Connect">
            <summary>
            Connect to an ftp server
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.List">
            <summary>
            Retrieves a list of files from the ftp server
            </summary>
            <returns>An ArrayList of files</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.ListFiles">
            <summary>
            Gets a file list only
            </summary>
            <returns>ArrayList of files only</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.ListDirectories">
            <summary>
            Gets a directory list only
            </summary>
            <returns>ArrayList of directories only</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.GetFileDateRaw(System.String)">
            <summary>
            Returns the 'Raw' DateInformation in ftp format. (YYYYMMDDhhmmss). Use GetFileDate to return a DateTime object as a better option.
            </summary>
            <param name="fileName">Remote FileName to Query</param>
            <returns>Returns the 'Raw' DateInformation in ftp format</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.GetFileDate(System.String)">
            <summary>
            GetFileDate will query the ftp server for the date of the remote file.
            </summary>
            <param name="fileName">Remote FileName to Query</param>
            <returns>DateTime of the Input FileName</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.GetWorkingDirectory">
            <summary>
            Get the working directory on the ftp server
            </summary>
            <returns>The working directory</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.ChangeDir(System.String)">
            <summary>
            Change to another directory on the ftp server
            </summary>
            <param name="path">Directory to change to</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.MakeDir(System.String)">
            <summary>
            Create a directory on the ftp server
            </summary>
            <param name="dir">Directory to create</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.RemoveDir(System.String)">
            <summary>
            Remove a directory from the ftp server
            </summary>
            <param name="dir">Name of directory to remove</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.RemoveFile(System.String)">
            <summary>
            Remove a file from the ftp server
            </summary>
            <param name="filename">Name of the file to delete</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.RenameFile(System.String,System.String)">
            <summary>
            Rename a file on the ftp server
            </summary>
            <param name="oldfilename">Old file name</param>
            <param name="newfilename">New file name</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.GetFileSize(System.String)">
            <summary>
            Get the size of a file (Provided the ftp server supports it)
            </summary>
            <param name="filename">Name of file</param>
            <returns>The size of the file specified by filename</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.OpenUpload(System.String)">
            <summary>
            Open an upload with no resume if it already exists
            </summary>
            <param name="filename">File to upload</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.OpenUpload(System.String,System.String)">
            <summary>
            Open an upload with no resume if it already exists
            </summary>
            <param name="filename">Local file to upload (Can include path to file)</param>
            <param name="remotefilename">Filename to store file as on ftp server</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.OpenUpload(System.String,System.Boolean)">
            <summary>
            Open an upload with resume support
            </summary>
            <param name="filename">Local file to upload (Can include path to file)</param>
            <param name="resume">Attempt resume if exists</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.OpenUpload(System.String,System.String,System.Boolean)">
            <summary>
            Open an upload with resume support
            </summary>
            <param name="filename">Local file to upload (Can include path to file)</param>
            <param name="remote_filename">Filename to store file as on ftp server</param>
            <param name="resume">Attempt resume if exists</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.OpenDownload(System.String)">
            <summary>
            Download a file with no resume
            </summary>
            <param name="filename">Remote file name</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.OpenDownload(System.String,System.Boolean)">
            <summary>
            Download a file with optional resume
            </summary>
            <param name="filename">Remote file name</param>
            <param name="resume">Attempt resume if file exists</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.OpenDownload(System.String,System.String)">
            <summary>
            Download a file with no attempt to resume
            </summary>
            <param name="filename">Remote filename</param>
            <param name="localfilename">Local filename (Can include path to file)</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.OpenDownload(System.String,System.String,System.Boolean)">
            <summary>
            Open a file for download
            </summary>
            <param name="remote_filename">The name of the file on the FTP server</param>
            <param name="local_filename">The name of the file to save as (Can include path to file)</param>
            <param name="resume">Attempt resume if file exists</param>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.DoUpload">
            <summary>
            Upload the file, to be used in a loop until file is completely uploaded
            </summary>
            <returns>Bytes sent</returns>
        </member>
        <member name="M:fyUtilitylib.fyFtpHelper_Alternative4.DoDownload">
            <summary>
            Download a file, to be used in a loop until the file is completely downloaded
            </summary>
            <returns>Number of bytes recieved</returns>
        </member>
        <member name="T:fyUtilitylib.fyHtml2RTFHelper">
            <summary>
            Html 转换为 RTF 帮助类（基于Microsoft.Office.Interop.Word）
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyHtml2RTFHelper.Html2RTF_Clipboard">
            <summary>
            Html to RTF “剪贴板”输入 and “剪贴板”输出
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyHttpHelper">
            <summary>
            一个模拟GET和POST的工具类
            来源：网上
            原名：HttpTool
            链接： http://www.oschina.net/code/snippet_1156122_35766
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyHttpHelper.sendPost(System.String,System.String)">
            <summary>
            模拟POST访问
            </summary>
            <param name="postUrl">模拟POST的URL</param>
            <param name="postDataStr">需要POST的数据</param>
            <returns>模拟访问的网页源代码</returns>
        </member>
        <member name="M:fyUtilitylib.fyHttpHelper.SendGet(System.String)">
            <summary>
            模拟GET访问
            </summary>
            <param name="getUrl">模拟GET的URL</param>
            <returns>模拟访问的网页源代码</returns>
        </member>
        <member name="T:fyUtilitylib.fyIdentifyEncodingHelper">
            <summary>
            检测字符编码的类
            来源：网络
            原名：IdentifyEncoding
            链接：http://www.lanmeng.org/c-sharp-automatically-determine-the-file-encoding.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.#ctor">
            <summary>
            初始化 <see cref="!:IdentifyEncoding"/> 的实例
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.GetEncodingName(System.Uri)">
            <summary>
            从指定的 <see cref="T:System.Uri"/> 中判断编码类型
            </summary>
            <param name="testurl">要判断的 <see cref="T:System.Uri"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see cref="M:fyUtilitylib.fyIdentifyEncodingHelper.GetEncodingName(System.Uri)"/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(new Uri("http://china5.nikkeibp.co.jp/china/news/com/200307/pr_com200307170131.html")));  
            </code>
            </example>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.GetEncodingName(System.IO.FileInfo)">
            <summary>
            从指定的 <see cref="T:System.IO.FileInfo"/> 中判断编码类型
            </summary>
            <param name="testfile">要判断的 <see cref="T:System.IO.FileInfo"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 "GetEncodingName"方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(new System.IO.FileInfo(@"C:\test.txt")));  
            </code>
            </example>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.GetEncodingName(System.SByte[])">
            <summary>
            从指定的 <see cref="T:System.SByte"/> 字节数组中判断编码类型
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.IO.FileInfo"/> </param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
            <example>
            以下示例演示了如何调用 <see cref="M:fyUtilitylib.fyIdentifyEncodingHelper.GetEncodingName(System.Uri)"/> 方法：
            <code>
             IdentifyEncoding ide = new IdentifyEncoding();
             Response.Write(ide.GetEncodingName(IdentifyEncoding.ToSByteArray(System.Text.Encoding.GetEncoding("gb2312").GetBytes("Lion互动网络(www.lionsky.net)")))); 
            </code>
            </example>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.GB2312Probability(System.SByte[])">
            <summary>
            判断是GB2312编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.GBKProbability(System.SByte[])">
            <summary>
            判断是GBK编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.HZProbability(System.SByte[])">
            <summary>
            判断是HZ编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.BIG5Probability(System.SByte[])">
            <summary>
            判断是BIG5编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.ENCTWProbability(System.SByte[])">
            <summary>
            判断是CNS11643(台湾)编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.ISO2022CNProbability(System.SByte[])">
            <summary>
            判断是ISO2022CN编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.UTF8Probability(System.SByte[])">
            <summary>
            判断是UTF8编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.UnicodeProbability(System.SByte[])">
            <summary>
            判断是Unicode编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.ASCIIProbability(System.SByte[])">
            <summary>
            判断是ASCII编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.Initialize_Frequencies">
            <summary>
            初始化必要的条件
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.ToByteArray(System.SByte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.SByte"/> 字符数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sbyteArray">要转换的 <see cref="T:System.SByte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.ToByteArray(System.String)">
            <summary>
            将此实例中的指定字符串转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sourceString">要转换的字符串</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.ToByteArray(System.Object[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Object"/> 数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="tempObjectArray">要转换的 <see cref="T:System.Object"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.ToSByteArray(System.Byte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Byte"/> 字符数组转换到 <see cref="T:System.SByte"/> 字符数组。
            </summary>
            <param name="byteArray">要转换的 <see cref="T:System.Byte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.SByte"/> 字符数组</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.ReadInput(System.IO.Stream,System.SByte[]@,System.Int32,System.Int32)">
            <summary>从流读取字节序列,并将此流中的位置提升读取的字节数.</summary>
            <param name="sourceStream">要读取的流.</param>
            <param name="target">字节数组。此方法返回时,该缓冲区包含指定的字符数组,该数组的 start 和 (start + count-1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="start">buffer 中的从零开始的字节偏移量,从此处开始存储从当前流中读取的数据。.</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多,则总字节数可能小于请求的字节数,或者如果已到达流的末尾,则为零 (0)。</returns>
            <exception cref="T:System.ArgumentException">start 与 count 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">target 为空引用(Visual Basic 中为 Nothing)。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset 或 count 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.ReadInput(System.IO.TextReader,System.SByte[]@,System.Int32,System.Int32)">
            <summary>从字符系列读取字节序列,并将此字符系列中的位置提升读取的字节数。</summary>
            <param name="sourceTextReader">要读取的流。</param>
            <param name="target">字节数组。此方法返回时,该缓冲区包含指定的字符数组,该数组的 start 和 (start + count-1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="start">buffer 中的从零开始的字节偏移量,从此处开始存储从当前流中读取的数据。.</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns>读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多,则总字节数可能小于请求的字节数,或者如果已到达流的末尾,则为零 (0)。</returns>
            <exception cref="T:System.ArgumentException">start 与 count 的和大于缓冲区长度。</exception>
            <exception cref="T:System.ArgumentNullException">target 为空引用(Visual Basic 中为 Nothing)。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset 或 count 为负。</exception>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
            <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.FileLength(System.IO.FileInfo)">
            <summary>
            检测当前文件的大小
            </summary>
            <param name="file">被检测的文件</param>
            <returns>当前文件的大小。</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:fyUtilitylib.fyIdentifyEncodingHelper.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="T:fyUtilitylib.fyImageHelper">
            <summary>
            名称：fyImageHelper 图像辅助类
            作者：喻思羽
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyImageHelper.FromFileFast(System.String)">
            <summary>
            比Image.FromFile更快加载图像的方法
            作者：喻思羽
            时间：2016.1.30添加方法
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyIniFileHelper">
            <summary>
            INI文件的读、写操作类
            来源：网络
            原名：IniFile
            链接：无
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyIniFileHelper.MaxSectionSize">
            <summary> 
            The maximum size of a section in an ini file. 
            </summary> 
            <remarks> 
            This property defines the maximum size of the buffers 
            used to retreive data from an ini file.  This value is 
            the maximum allowed by the win32 functions 
            GetPrivateProfileSectionNames() or 
            GetPrivateProfileString(). 
            </remarks> 
        </member>
        <member name="T:fyUtilitylib.fyIniFileHelper.NativeMethods">
            <summary> 
            A static class that provides the win32 P/Invoke signatures 
            used by this class. 
            </summary> 
            <remarks> 
            Note:  In each of the declarations below, we explicitly set CharSet to 
            Auto.  By default in C#, CharSet is set to Ansi, which reduces 
            performance on windows 2000 and above due to needing to convert strings 
            from Unicode (the native format for all .Net strings) to Ansi before 
            marshalling.  Using Auto lets the marshaller select the Unicode version of 
            these functions when available. 
            </remarks> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.#ctor(System.String)">
            <summary> 
            Initializes a new instance of the <see cref="!:IniFile"/> class. 
            </summary> 
            <param name="path">The ini file to read and write from.</param> 
        </member>
        <member name="P:fyUtilitylib.fyIniFileHelper.Path">
            <summary> 
            Gets the full path of ini file this object instance is operating on. 
            </summary> 
            <value>A file path.</value> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.GetString(System.String,System.String,System.String)">
            <summary> 
            Gets the value of a setting in an ini file as a <see cref="T:System.String"/>. 
            </summary> 
            <param name="sectionName">The name of the section to read from.</param> 
            <param name="keyName">The name of the key in section to read.</param> 
            <param name="defaultValue">The default value to return if the key 
            cannot be found.</param> 
            <returns>The value of the key, if found.  Otherwise, returns 
            <paramref name="defaultValue"/></returns> 
            <remarks> 
            The retreived value must be less than 32KB in length. 
            </remarks> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.GetInt16(System.String,System.String,System.Int16)">
            <summary> 
            Gets the value of a setting in an ini file as a <see cref="T:System.Int16"/>. 
            </summary> 
            <param name="sectionName">The name of the section to read from.</param> 
            <param name="keyName">The name of the key in section to read.</param> 
            <param name="defaultValue">The default value to return if the key 
            cannot be found.</param> 
            <returns>The value of the key, if found.  Otherwise, returns 
            <paramref name="defaultValue"/>.</returns> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.GetInt32(System.String,System.String,System.Int32)">
            <summary> 
            Gets the value of a setting in an ini file as a <see cref="T:System.Int32"/>. 
            </summary> 
            <param name="sectionName">The name of the section to read from.</param> 
            <param name="keyName">The name of the key in section to read.</param> 
            <param name="defaultValue">The default value to return if the key 
            cannot be found.</param> 
            <returns>The value of the key, if found.  Otherwise, returns 
            <paramref name="defaultValue"/></returns> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.GetDouble(System.String,System.String,System.Double)">
            <summary> 
            Gets the value of a setting in an ini file as a <see cref="T:System.Double"/>. 
            </summary> 
            <param name="sectionName">The name of the section to read from.</param> 
            <param name="keyName">The name of the key in section to read.</param> 
            <param name="defaultValue">The default value to return if the key 
            cannot be found.</param> 
            <returns>The value of the key, if found.  Otherwise, returns 
            <paramref name="defaultValue"/></returns> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.GetSectionValuesAsList(System.String)">
            <summary> 
            Gets all of the values in a section as a list. 
            </summary> 
            <param name="sectionName"> 
            Name of the section to retrieve values from. 
            </param> 
            <returns> 
            A <see cref="T:System.Collections.Generic.List`1"/> containing <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects 
            that describe this section.  Use this verison if a section may contain 
            multiple items with the same key value.  If you know that a section 
            cannot contain multiple values with the same key name or you don't 
            care about the duplicates, use the more convenient 
            <see cref="M:fyUtilitylib.fyIniFileHelper.GetSectionValues(System.String)"/> function. 
            </returns> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> is a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.GetSectionValues(System.String)">
            <summary> 
            Gets all of the values in a section as a dictionary. 
            </summary> 
            <param name="sectionName"> 
            Name of the section to retrieve values from. 
            </param> 
            <returns> 
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the key/value 
            pairs found in this section.   
            </returns> 
            <remarks> 
            If a section contains more than one key with the same name, 
            this function only returns the first instance.  If you need to 
            get all key/value pairs within a section even when keys have the 
            same name, use <see cref="M:fyUtilitylib.fyIniFileHelper.GetSectionValuesAsList(System.String)"/>. 
            </remarks> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> is a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.GetKeyNames(System.String)">
            <summary> 
            Gets the names of all keys under a specific section in the ini file. 
            </summary> 
            <param name="sectionName"> 
            The name of the section to read key names from. 
            </param> 
            <returns>An array of key names.</returns> 
            <remarks> 
            The total length of all key names in the section must be 
            less than 32KB in length. 
            </remarks> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> is a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.GetSectionNames">
            <summary> 
            Gets the names of all sections in the ini file. 
            </summary> 
            <returns>An array of section names.</returns> 
            <remarks> 
            The total length of all section names in the section must be 
            less than 32KB in length. 
            </remarks> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.ConvertNullSeperatedStringToStringArray(System.IntPtr,System.Int32)">
            <summary> 
            Converts the null seperated pointer to a string into a string array. 
            </summary> 
            <param name="ptr">A pointer to string data.</param> 
            <param name="valLength"> 
            Length of the data pointed to by <paramref name="ptr"/>. 
            </param> 
            <returns> 
            An array of strings; one for each null found in the array of characters pointed 
            at by <paramref name="ptr"/>. 
            </returns> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.WriteValueInternal(System.String,System.String,System.String)">
            <summary> 
            Writes a <see cref="T:System.String"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The string value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.WriteValue(System.String,System.String,System.String)">
            <summary> 
            Writes a <see cref="T:System.String"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The string value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> or 
            <paramref name="value"/>  are a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.WriteValue(System.String,System.String,System.Int16)">
            <summary> 
            Writes an <see cref="T:System.Int16"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.WriteValue(System.String,System.String,System.Int32)">
            <summary> 
            Writes an <see cref="T:System.Int32"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.WriteValue(System.String,System.String,System.Single)">
            <summary> 
            Writes an <see cref="T:System.Single"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.WriteValue(System.String,System.String,System.Double)">
            <summary> 
            Writes an <see cref="T:System.Double"/> value to the ini file. 
            </summary> 
            <param name="sectionName">The name of the section to write to .</param> 
            <param name="keyName">The name of the key to write to.</param> 
            <param name="value">The value to write</param> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            The write failed. 
            </exception> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.DeleteKey(System.String,System.String)">
            <summary> 
            Deletes the specified key from the specified section. 
            </summary> 
            <param name="sectionName"> 
            Name of the section to remove the key from. 
            </param> 
            <param name="keyName"> 
            Name of the key to remove. 
            </param> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> or <paramref name="keyName"/> are 
            a null reference  (Nothing in VB) 
            </exception> 
        </member>
        <member name="M:fyUtilitylib.fyIniFileHelper.DeleteSection(System.String)">
            <summary> 
            Deletes a section from the ini file. 
            </summary> 
            <param name="sectionName"> 
            Name of the section to delete. 
            </param> 
            <exception cref="T:System.ArgumentNullException"> 
            <paramref name="sectionName"/> is a null reference (Nothing in VB) 
            </exception> 
        </member>
        <member name="T:fyUtilitylib.fyKeyboardHelper">
            <summary>
            键盘按键辅助类
            提供访问键盘当前状态的属性，
            如什么键当前按下，提供了一种方法，以发送击键到活动窗口。
            来源：网络
            原名：MyKeyboardHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyKeyboardHelper.AltKeyDown">
            <summary>获取一个布尔值，表示如果ALT键是向下。</summary>
            <returns>一个布尔值：如果ALT键，否则为false。</returns>
        </member>
        <member name="P:fyUtilitylib.fyKeyboardHelper.CapsLock">
            <summary>获取一个布尔值，指示，如果已开启CAPS LOCK键。 </summary>
            <returns>一个布尔值：如果已开启CAPS LOCK键，则为true，否则为false。</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:fyUtilitylib.fyKeyboardHelper.CtrlKeyDown">
            <summary>获取一个布尔值，表示如果CTRL键是向下。</summary>
            <returns>一个布尔值。真正如果CTRL键，否则为false。</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:fyUtilitylib.fyKeyboardHelper.NumLock">
            <summary>获取一个布尔值，表示如果NUM LOCK键是。</summary>
            <returns>一个布尔值。true，如果数字锁定，否则为false。</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:fyUtilitylib.fyKeyboardHelper.ScrollLock">
            <summary>获取一个布尔值，指示是否SCROLL LOCK键是。 </summary>
            <returns>一个布尔值。True如果滚动锁被，否则为false。</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:fyUtilitylib.fyKeyboardHelper.ShiftKeyDown">
            <summary>获取一个布尔值，表示如果SHIFT键是向下。</summary>
            <returns>一个布尔值。真正如果SHIFT键是向下，否则为false。</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:fyUtilitylib.fyKeyboardHelper.SendKeys(System.String)">
            <summary>发送一个或多个击键到活动窗口，如果在键盘上输入。</summary>
            <param name="keys">一个字符串，定义发送键。</param>
        </member>
        <member name="M:fyUtilitylib.fyKeyboardHelper.SendKeys(System.String,System.Boolean)">
            <summary>发送一个或多个击键到活动窗口，如果在键盘上输入。</summary>
            <param name="keys">一个字符串，定义发送键。</param>
            <param name="wait">可选的。一个布尔值，指定是否等待的应用程序继续之前得到处理的击键。默认为true。</param>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /></PermissionSet>
        </member>
        <member name="T:fyUtilitylib.NativeMethodsTemp">
            <summary>
            从 .Net 2.0 的 System.Windows.Forms.Dll 库提取
            版权所有：微软公司
            </summary>
        </member>
        <member name="M:fyUtilitylib.UnsafeNativeMethods.GetKeyState(System.Int32)">
            <summary>
            retrieves the status of the specified virtual key
            </summary>
            <param name="keyCode">Specifies a virtual key</param>
            <returns>
            The return value specifies the status of the specified virtual key, as follows: 
             If the high-order bit is 1, the key is down; otherwise, it is up.
             If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, 
             is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0.
             A toggle key's indicator light (if any) on the keyboard will be on when the key is
             toggled, and off when the key is untoggled.
            </returns>
        </member>
        <!-- 对于成员“T:fyUtilitylib.fyLinqHelper`1”忽略有格式错误的 XML 注释 -->
        <member name="T:fyUtilitylib.fyEntityListHelper">
            <summary>
            实体类、DataTable相互转换辅助类
            来源：网络
            网址：http://www.soaspx.com/dotnet/asp.net/tech/tech_20110324_7409.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyEntityListHelper.EntityListToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将一个列表转换成DataTable,如果列表为空将返回空的DataTable结构
            </summary>
            <typeparam name="T">要转换的数据类型</typeparam>
            <param name="entityList">实体对象列表</param> 
        </member>
        <member name="M:fyUtilitylib.fyEntityListHelper.DataTableToEntityList``1(System.Data.DataTable)">
            <summary>
            将一个DataTable转换成列表
            </summary>
            <typeparam name="T">实体对象的类型</typeparam>
            <param name="dt">要转换的DataTable</param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyLockBitmapHelper">
            <summary>
            LockBitmap，通过把Bitmap数据拷贝出来，在内存上直接操作，操作完成后在拷贝到Bitmap中
            网址：http://www.codeproject.com/Tips/240428/Work-with-bitmap-faster-with-Csharp#_rating
            网址：http://www.cnblogs.com/bomo/archive/2013/02/26/2934055.html
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLockBitmapHelper.Pixels">
            <summary>
            
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLockBitmapHelper.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLockBitmapHelper.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyLockBitmapHelper.Height">
            <summary>
            
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyLockBitmapHelper.#ctor(System.Drawing.Bitmap)">
            <summary>
            fyLockBitmapHelper构造函数
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:fyUtilitylib.fyLockBitmapHelper.LockBits">
            <summary>
            Lock bitmap data
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyLockBitmapHelper.UnlockBits">
            <summary>
            Unlock bitmap data
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyLockBitmapHelper.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get the color of the specified pixel
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyLockBitmapHelper.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Set the color of the specified pixel
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="color"></param>
        </member>
        <member name="T:fyUtilitylib.fyMFTScannerHelper">
            <summary>
            扫描硬盘文件帮助类
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyMFTScannerHelper.EnumerateFiles(System.String)">
            <summary>
            获取文件路径列表
            </summary>
            <param name="szDriveLetter"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyMouseHelper">
            <summary>
            模拟鼠标点击辅助类
            来源：网络
            原名：MyMouseHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyMouseHelper.MousePresent">
            <summary>
            检查鼠标是否已经安装.
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyMouseHelper.WheelExists">
            <summary>
            检查鼠标是否存在滚轮
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyMouseHelper.WheelScrollLines">
            <summary>
            获取鼠标滚轮每次滚动的行数
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyMouseHelper.GetDoubleClickTime">
            <summary>
            连续两次鼠标单击之间会被处理成双击事件的间隔时间。
            </summary>
            <returns>以毫秒表示的双击时间</returns>
        </member>
        <member name="M:fyUtilitylib.fyMouseHelper.GetCursorPos(System.Drawing.Point)">
            <summary>
            检取光标的位置，以屏幕坐标表示。
            </summary>
            <param name="lpPoint">POINT结构指针，该结构接收光标的屏幕坐标。</param>
            <returns>如果成功，返回值非零；如果失败，返回值为零。</returns>
        </member>
        <member name="M:fyUtilitylib.fyMouseHelper.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            把光标移到屏幕的指定位置。如果新位置不在由 ClipCursor函数设置的屏幕矩形区域之内，则系统自动调整坐标，使得光标在矩形之内。
            </summary>
            <param name="x">指定光标的新的X坐标，以屏幕坐标表示。</param>
            <param name="y">指定光标的新的Y坐标，以屏幕坐标表示。</param>
            <returns>如果成功，返回非零值；如果失败，返回值是零</returns>
        </member>
        <member name="M:fyUtilitylib.fyMouseHelper.MouseClick">
            <summary>
            在当前鼠标的位置左键点击一下
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyMouseHelper.MouseClick(System.Drawing.Point)">
            <summary>
            移动到坐标位置点击
            </summary>
            <param name="location">要点击的坐标位置,屏幕绝对值</param>
        </member>
        <member name="M:fyUtilitylib.fyMouseHelper.MouseRightClick(System.Drawing.Point)">
            <summary>
            移动到坐标位置点击
            </summary>
            <param name="location">要点击的坐标位置,屏幕绝对值</param>
        </member>
        <member name="M:fyUtilitylib.fyMouseHelper.MouseMove(System.Drawing.Point)">
            <summary>
            移动到坐标位置
            </summary>
            <param name="location">要移动到的坐标位置,屏幕绝对值</param>
        </member>
        <member name="T:fyUtilitylib.fyMsgHelper">
            <summary>
            简化消息框的调用
            来源：网络
            链接：暂无
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetLocalIP">
            <summary>
            获取本地机器IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetValidIP(System.String)">
            <summary>
            检查设置的IP地址是否正确，并返回正确的IP地址,无效IP地址返回"-1"。
            </summary>
            <param name="ip">设置的IP地址</param>
            <returns>非法IP 则返回 -1 </returns>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetValidPort(System.String)">
            <summary>
            检查设置的端口号是否正确，并返回正确的端口号,无效端口号返回-1。
            </summary>
            <param name="port">设置的端口号</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.StringToIPAddress(System.String)">
            <summary>
            将字符串形式的IP地址转换成IPAddress对象
            </summary>
            <param name="ip">字符串形式的IP地址</param>        
        </member>
        <member name="P:fyUtilitylib.fyNetworkHelper.LocalHostName">
            <summary>
            获取本机的计算机名
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyNetworkHelper.LANIP">
            <summary>
            获取本机的局域网IP
            </summary>        
        </member>
        <member name="P:fyUtilitylib.fyNetworkHelper.WANIP">
            <summary>
            获取本机在Internet网络的广域网IP
            </summary>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetClientIP(System.Net.Sockets.Socket)">
            <summary>
            获取远程客户机的IP地址
            </summary>
            <param name="clientSocket">客户端的socket对象</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.CreateIPEndPoint(System.String,System.Int32)">
            <summary>
            创建一个IPEndPoint对象
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口号</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.CreateTcpListener">
            <summary>
            创建一个自动分配IP和端口的TcpListener对象
            </summary>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.CreateTcpListener(System.String,System.Int32)">
            <summary>
            创建一个TcpListener对象
            </summary>
            <param name="ip">IP地址</param>
            <param name="port">端口</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.CreateTcpSocket">
            <summary>
            创建一个基于TCP协议的Socket对象
            </summary>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.CreateUdpSocket">
            <summary>
            创建一个基于UDP协议的Socket对象
            </summary>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetLocalPoint(System.Net.Sockets.TcpListener)">
            <summary>
            获取TcpListener对象的本地终结点
            </summary>
            <param name="tcpListener">TcpListener对象</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetLocalPoint_IP(System.Net.Sockets.TcpListener)">
            <summary>
            获取TcpListener对象的本地终结点的IP地址
            </summary>
            <param name="tcpListener">TcpListener对象</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetLocalPoint_Port(System.Net.Sockets.TcpListener)">
            <summary>
            获取TcpListener对象的本地终结点的端口号
            </summary>
            <param name="tcpListener">TcpListener对象</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetLocalPoint(System.Net.Sockets.Socket)">
            <summary>
            获取Socket对象的本地终结点
            </summary>
            <param name="socket">Socket对象</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetLocalPoint_IP(System.Net.Sockets.Socket)">
            <summary>
            获取Socket对象的本地终结点的IP地址
            </summary>
            <param name="socket">Socket对象</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.GetLocalPoint_Port(System.Net.Sockets.Socket)">
            <summary>
            获取Socket对象的本地终结点的端口号
            </summary>
            <param name="socket">Socket对象</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.BindEndPoint(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            绑定终结点
            </summary>
            <param name="socket">Socket对象</param>
            <param name="endPoint">要绑定的终结点</param>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.BindEndPoint(System.Net.Sockets.Socket,System.String,System.Int32)">
            <summary>
            绑定终结点
            </summary>
            <param name="socket">Socket对象</param>        
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口</param>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.StartListen(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            指定Socket对象执行监听，默认允许的最大挂起连接数为100
            </summary>
            <param name="socket">执行监听的Socket对象</param>
            <param name="port">监听的端口号</param>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.StartListen(System.Net.Sockets.Socket,System.Int32,System.Int32)">
            <summary>
            指定Socket对象执行监听
            </summary>
            <param name="socket">执行监听的Socket对象</param>
            <param name="port">监听的端口号</param>
            <param name="maxConnection">允许的最大挂起连接数</param>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.StartListen(System.Net.Sockets.Socket,System.String,System.Int32,System.Int32)">
            <summary>
            指定Socket对象执行监听
            </summary>
            <param name="socket">执行监听的Socket对象</param>
            <param name="ip">监听的IP地址</param>
            <param name="port">监听的端口号</param>
            <param name="maxConnection">允许的最大挂起连接数</param>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.Connect(System.Net.Sockets.Socket,System.String,System.Int32)">
            <summary>
            连接到基于TCP协议的服务器,连接成功返回true，否则返回false
            </summary>
            <param name="socket">Socket对象</param>
            <param name="ip">服务器IP地址</param>
            <param name="port">服务器端口号</param>     
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.SendMsg(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            以同步方式向指定的Socket对象发送消息
            </summary>
            <param name="socket">socket对象</param>
            <param name="msg">发送的消息</param>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.SendMsg(System.Net.Sockets.Socket,System.String)">
            <summary>
            使用UTF8编码格式以同步方式向指定的Socket对象发送消息
            </summary>
            <param name="socket">socket对象</param>
            <param name="msg">发送的消息</param>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.ReceiveMsg(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            以同步方式接收消息
            </summary>
            <param name="socket">socket对象</param>
            <param name="buffer">接收消息的缓冲区</param>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.ReceiveMsg(System.Net.Sockets.Socket)">
            <summary>
            以同步方式接收消息，并转换为UTF8编码格式的字符串,使用5000字节的默认缓冲区接收。
            </summary>
            <param name="socket">socket对象</param>        
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.Close(System.Net.Sockets.Socket)">
            <summary>
            关闭基于Tcp协议的Socket对象
            </summary>
            <param name="socket">要关闭的Socket对象</param>
        </member>
        <member name="M:fyUtilitylib.fyNetworkHelper.IsConnectedInternet">
            <summary>
            检测本机是否联网
            </summary>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyPinYinHelper">
            <summary>
            中文拼音操作类
            来源：网络
            原名：MyPinYinHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="F:fyUtilitylib.fyPinYinHelper.PinyinValues">
            <SUMMARY>
            包含字符 ASC 码的整形数组。
            </SUMMARY>
        </member>
        <member name="F:fyUtilitylib.fyPinYinHelper.PinyinNames">
            <SUMMARY>
            包含汉字拼音的字符串数组。
            </SUMMARY>
        </member>
        <member name="M:fyUtilitylib.fyPinYinHelper.CHSToPinyin(System.String,System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyPinYinHelper.CHSToPinyin(System.String,System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyPinYinHelper.CHSToPinyin(System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyPinYinHelper.CHSToPinyin(System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyPinYinHelper.GetFirstPY(System.String)">
            <summary>
            提取首字母。兼容中英文
            </summary>
            <param name="chsStr">单个汉字或字母</param>
            <returns>返回值</returns>
        </member>
        <member name="P:fyUtilitylib.fyPinYinHelper.CHSPhraseSpecial">
            <summary>
            设置或获取包含例外词组读音的键/值对的组合
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyPointerBitmapHelper">
            <summary>
            PointerBitmap，这种方法访问速度比内存法更快，直接通过指针对内存进行操作，
            不需要进行拷贝，但是在C#中直接通过指针操作内存是不安全的，所以需要在代码
            中加入unsafe关键字，在生成选项中把允许不安全代码勾上，才能编译通过
            网址：http://www.cnblogs.com/bomo/archive/2013/02/26/2934055.html
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyPointerBitmapHelper.Depth">
            <summary>
            
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyPointerBitmapHelper.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:fyUtilitylib.fyPointerBitmapHelper.Height">
            <summary>
            
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyPointerBitmapHelper.#ctor(System.Drawing.Bitmap)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:fyUtilitylib.fyPointerBitmapHelper.LockBits">
            <summary>
            
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyPointerBitmapHelper.UnlockBits">
            <summary>
            
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyPointerBitmapHelper.GetPixel(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyPointerBitmapHelper.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="c"></param>
        </member>
        <member name="T:fyUtilitylib.fyProcessHelper">
            <summary>
            进程帮助类
            </summary>
        </member>
        <member name="T:fyUtilitylib.fyRandomHelper`1">
            <summary>
            随机数辅助类
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyRandomHelper`1.GetRandomStringByPattern(System.String)">
            <summary>
            根据规则随机生成字符串
            </summary>
            <param name="pattern">样式："?"代表一个字符，"#"代表一个一位数字，"*"代表一个字符串或一个一位数字</param>
            <returns>随机字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyRandomHelper`1.GetFormatedNumeric(System.Int32,System.Int32)">
            <summary>
            生成随机的数值
            </summary>
            <param name="min">随机数可取该下界值</param>
            <param name="max">随机数的上界</param>
            <returns>随机的数值</returns>
        </member>
        <member name="M:fyUtilitylib.fyRandomHelper`1.GetRandomString(System.String,System.Int32)">
            <summary>
            获取指定长度和字符的随机字符串
            通过调用 Random 类的 Next() 方法，先获得一个大于或等于 0 而小于 pwdchars 长度的整数
            以该数作为索引值，从可用字符串中随机取字符，以指定的密码长度为循环次数
            依次连接取得的字符，最后即得到所需的随机密码串了。
            </summary>
            <param name="pwdchars">随机字符串里包含的字符</param>
            <param name="pwdlen">随机字符串的长度</param>
            <returns>随机产生的字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyRandomHelper`1.GetRandomString(System.Int32)">
            <summary>
            获取指定长度的随机字符串
            </summary>
            <param name="pwdlen">随机字符串的长度</param>
            <returns>随机产生的字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyRandomHelper`1.GetRandomWord(System.Int32)">
            <summary>
            获取指定长度的纯字母随机字符串
            </summary>
            <param name="pwdlen">数字串长度</param>
            <returns>纯字母随机字符串</returns>
        </member>
        <member name="M:fyUtilitylib.fyRandomHelper`1.GetRandomNum(System.Int32)">
            <summary>
            获取指定长度的纯数字随机数字串
            </summary>
            <param name="intlong">数字串长度</param>
            <returns>纯数字随机数字串</returns>
        </member>
        <member name="M:fyUtilitylib.fyRandomHelper`1.GetFileRandomName">
            <summary>
            获取按照年月时分秒随机数生成的文件名
            </summary>
            <returns>随机文件名</returns>
        </member>
        <member name="T:fyUtilitylib.fyRegistryHelper">
            <summary>
            注册表操作类
            来源：网络
            原名：RegistryHelper
            链接：http://www.cnblogs.com/onedime/archive/2012/08/23/2652398.html
            
            功能
            该类实现了注册表读取、写入、删除、查找等功能
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyRegistryHelper.GetRegistryData(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            读取指定名称的注册表的值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyRegistryHelper.SetRegistryData(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
            向注册表中写数据
            </summary>
            <param name="name"></param>
            <param name="tovalue"></param> 
        </member>
        <member name="M:fyUtilitylib.fyRegistryHelper.DeleteRegist(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            删除注册表中指定的注册表项
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:fyUtilitylib.fyRegistryHelper.IsRegistryExist(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            判断指定注册表项是否存在
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fySecurityHelper">
            <summary>
            加密解密辅助类
            喻思羽 2015.5
            </summary>
        </member>
        <member name="M:fyUtilitylib.fySecurityHelper.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySecurityHelper.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySecurityHelper.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySecurityHelper.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fySorterHelper">
            <summary>
            名称：fySorterHelper 排序类
            作者：喻思羽
            </summary>
        </member>
        <member name="M:fyUtilitylib.fySorterHelper.GetRandomNum(System.Int32,System.Int32)">
            <summary>
            随机获取数字
            </summary>
            <param name="count">获取到的数字的个数</param>
            <param name="max">获取的数字的最大值</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySorterHelper.RandomNotRepeatNum(System.Int32,System.Int32)">
            <summary>
            随机产生不重复数字
            </summary>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySorterHelper.SortRandom(System.Int32[])">
            <summary>
            随机排序
            </summary>
            <param name="sortArray"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySorterHelper.SortBubble(System.Int32[])">
            <summary>
            冒泡排序：依次比较相邻的两个数，将小数放在前面，大数放在后面。编程复杂度低，稳定性。
            </summary>
            <param name="sortArray"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySorterHelper.SortSelection(System.Int32[])">
            <summary>
            选择排序：首先在未排序序列中找到最小元素，存放到排序序列的起始位置，
            然后，再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。
            以此类推，直到所有元素均排序完毕
            </summary>
            <param name="sortArray"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySorterHelper.SortInsert(System.Int32[])">
            <summary>
            插入排序：每次将一个待排序的记录，按其关键字大小插入到前面已经排好序的子文件中的适当位置，
            直到全部记录插入完成为止。
            </summary>
            <param name="sortArray"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySorterHelper.SortShell(System.Int32[])">
            <summary>
            希尔排序：将数组列在一个表中并对列排序（用插入排序）。
            重复这过程，不过每次用更长的列来进行。
            最后整个表就只有一列了，最后再进行插入排序。
            </summary>
            <param name="sortArray"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fySorterHelper`1">
            <summary>
            名称：泛型数组进行随机排序的帮助类
            作者：喻思羽
            时间：2016-2-23
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:fyUtilitylib.fySorterHelper`1.RandomNotRepeatNum(System.Int32,System.Int32)">
            <summary>
            随机产生不重复数字
            </summary>
            <param name="max"></param>
            <param name="min"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fySorterHelper`1.SortRandom(System.Collections.Generic.List{`0})">
            <summary>
            随机排序
            </summary>
            <param name="oldList"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyStringHelper">
            <summary>
            名称：fyStringHelper 字符串帮助类
            作者：喻思羽
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyStringHelper.StringToStrArray(System.String,System.Char,System.Boolean)">
            <summary>
            把字符串按照分隔符转换成 List
            </summary>
            <param name="str">源字符串</param>
            <param name="separator">分隔符</param>
            <param name="toLower">是否转换为小写</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyStringHelper.StringToStrArray(System.String)">
            <summary>
            把字符串转 按照‘,’(逗号)分割 换为数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyStringHelper.StrArrayToString(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            按照分隔符组装成 string
            </summary>
            <param name="list"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyStringHelper.StrArrayToString(System.Collections.Generic.List{System.String})">
            <summary>
            得到数组列表以逗号分隔的字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyTxtFileEncodingHelper">
            <summary>
            获取文本文件的编码格式
            来源：网络
            原名：TxtFileEncoding
            链接：http://www.cnblogs.com/mawanglin2008/articles/3123510.html
            
            说明：
            不少朋友遇到用System.IO.StreamReader读取包含汉字的txt文件时，经常会读出乱码（StreamWriater写文本文件
            也有类似的问题）,原因很简单，就是文件的编码（encoding）和StreamReader/Writer的encoding不对应。为了解
            决这个问题，我写了一个类，来取得一个文本文件的encoding，这样我们就可以创建对应的StreamReader和
            StreamWriter来读写，保证不会出现乱码现象。其实原理很简单，文本编辑器（比如XP自带的记事本）在生成文本
            文件时，如果编码格式和系统默认的编码（中文系统下默认为GB2312）不一致时，会在txt文件开头部分添加特定的
            “编码字节序标识（Encoding Bit Order Madk，简写为BOM）”，类似PE格式的"MZ"文件头。这样它在读取时就可
            以根据这个BOM来确定该文本文件生成时所使用的Encoding。这个BOM我们用记事本等程序打开默认是看不到的，但
            是用stream按字节读取时是可以读到的。我的这个TxtFileEncoding类就是根据这个BOM“文件头”来确定txt文件生
            成时用到的编码。
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyTxtFileEncodingHelper.GetEncoding(System.String)">
            <summary>
            取得一个文本文件的编码方式。如果无法在文件头部找到有效的前导符，Encoding.Default将被返回。
            </summary>
            <param name="fileName">文件名。</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyTxtFileEncodingHelper.GetEncoding(System.IO.FileStream)">
            <summary>
            取得一个文本文件流的编码方式。
            </summary>
            <param name="stream">文本文件流。</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyTxtFileEncodingHelper.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
            取得一个文本文件的编码方式。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>
            <returns></returns>
        </member>
        <member name="M:fyUtilitylib.fyTxtFileEncodingHelper.GetEncoding(System.IO.FileStream,System.Text.Encoding)">
            <summary>
            取得一个文本文件流的编码方式。
            </summary>
            <param name="stream">文本文件流。</param>
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>
            <returns></returns>
        </member>
        <member name="T:fyUtilitylib.fyValidateHelper">
            <summary>
            常用验证操作类
            来源：网络
            原名：MyValidateHelper，属于通用类库MyHelper4Web API
            链接：http://www.cnblogs.com/flashbar/archive/2013/01/23/helper.html
            </summary>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.GetStringLength(System.String)">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
            <param name="stringValue">字符串</param>
            <returns>字符长度</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidUserName(System.String)">
            <summary>
            检测用户名格式是否有效
            </summary>
            <param name="userName">用户名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidPassword(System.String)">
            <summary>
            密码有效性
            </summary>
            <param name="password">密码</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidInt(System.String)">
            <summary>
            int有效性
            </summary>
            <param name="val">字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsNumber(System.String)">
            <summary>
            是否数字字符串
            </summary>
            <param name="inputData">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsNumberSign(System.String)">
            <summary>
            是否数字字符串 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsDecimal(System.String)">
            <summary>
            是否是浮点数
            </summary>
            <param name="inputData">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsDecimalSign(System.String)">
            <summary>
            是否是浮点数 可带正负号
            </summary>
            <param name="inputData">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsHasCHZN(System.String)">
            <summary>
            检测是否有中文字符
            </summary>
            <param name="inputData">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.GetCHZNLength(System.String)">
            <summary> 
            检测含有中文字符串的实际长度 
            </summary>
            <param name="inputData">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsIdCard(System.String)">
            <summary>
            验证身份证是否合法  15 和  18位两种
            </summary>
            <param name="idCard">要验证的身份证</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsEmail(System.String)">
            <summary>
            是否是邮件地址
            </summary>
            <param name="inputData">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidZip(System.String)">
            <summary>
            邮编有效性
            </summary>
            <param name="zip">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidPhone(System.String)">
            <summary>
            固定电话有效性
            </summary>
            <param name="phone">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidMobile(System.String)">
            <summary>
            手机有效性
            </summary>
            <param name="mobile">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidPhoneAndMobile(System.String)">
            <summary>
            电话有效性（固话和手机 ）
            </summary>
            <param name="number">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidURL(System.String)">
            <summary>
            Url有效性
            </summary>
            <param name="url">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidIP(System.String)">
            <summary>
            IP有效性
            </summary>
            <param name="ip">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsValidDomain(System.String)">
            <summary>
            domain 有效性
            </summary>
            <param name="host">域名</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsBase64String(System.String)">
            <summary>
            判断是否为base64字符串
            </summary>
            <param name="str">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsGuid(System.String)">
            <summary>
            验证字符串是否是GUID
            </summary>
            <param name="guid">字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsDate(System.String)">
            <summary>
            判断输入的字符是否为日期
            </summary>
            <param name="strValue">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.IsDateHourMinute(System.String)">
            <summary>
            判断输入的字符是否为日期,如2004-07-12 14:25|||1900-01-01 00:00|||9999-12-31 23:59
            </summary>
            <param name="strValue">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.CheckMathLength(System.String,System.Int32)">
            <summary>
            检查字符串最大长度，返回指定长度的串
            </summary>
            <param name="inputData">输入字符串</param>
            <param name="maxLength">最大长度</param>
            <returns>返回值</returns>			
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.Encode(System.String)">
            <summary>
            转换成 HTML code
            </summary>
            <param name="str">输入字符串</param>
            <returns>返回值</returns>
        </member>
        <member name="M:fyUtilitylib.fyValidateHelper.Decode(System.String)">
             <summary>
            解析html成 普通文本
             </summary>
             <param name="str">输入字符串</param>
             <returns>返回值</returns>
        </member>
    </members>
</doc>
